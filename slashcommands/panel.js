const Discord = require("discord.js")
const config = require("../config.json");

const puni = {
    expul: "Expulsion.",
    banni: "Bannissement.",
    supprrole: "Suppression de ces rôles.",
    excluretempo: "Exclure temporairement.",
    clonnchannel: "Clonage du salon.",
    supprchannel: "Suppression.",
    aucun: "Aucune."
}

const rest = {
    proprioblanche: "   ・ Utilisateur dans la liste des propriétaires.\n   ・ Utilisateur dans la liste blanche.",
    proprio: "   ・ Utilisateur dans la liste des propriétaires.",
    blanche: "   ・ Utilisateur dans la liste blanche.",
    independant: "   ・ Utilisateur indépendant.",
    proprioindependant: "   ・ Utilisateur dans la liste des propriétaires.\n   ・ Utilisateur indépendant.",
    blancheindependant: "   ・ Utilisateur dans la liste blanche.\n   ・ Utilisateur indépendant.",
    proprioblancheindependant: "   ・ Utilisateur dans la liste des propriétaires.\n   ・ Utilisateur dans la liste blanche.\n   ・ Utilisateur indépendant."
}

const link = {
    image: "   ・ Contenant une image.",
    imagediscord: "   ・ Contenant une image.\n   ・ Contenant une invitation discord.",
    discord: "   ・ Contenant une invitation discord.",
    lien: "   ・ Contenant un lien en général.",
    imagelien: "   ・ Contenant un lien en général.\n   ・ Contenant un lien en général.",
    liendiscord: "   ・ Contenant une invitation discord.\n   ・ Contenant un lien en général.",
    imagediscordlien: "   ・ Contenant une image.\n   ・ Contenant une invitation discord.\n   ・ Contenant un lien en général."
}

module.exports = {
  name: "panel",
  description: "Gérer les modules du serveur.",
  permission: "Aucune",
  dm: false,
  owner: true,
  async run(bot, message, args) {
    let embeds = [];
    let currentPage = 0;
    let totalPages
    const itemsPerPage = 10;
    let button1, button2, button3, button4, button5, button6, button7, button8, button9
    let stateroleadd, stateaddbot, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook, statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser, stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel
    bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statedeletechannel = req[0].state
    bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statedeleterole = req[0].state
    bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statesupprembed = req[0].state
    bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statesourdineuser = req[0].state
    bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statemuteuser = req[0].state
    bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statemassiverole = req[0].state
    bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateupdateguild = req[0].state
    bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateupdatechannel = req[0].state
    bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateupdaterole = req[0].state
    bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statetoxicite = req[0].state
    bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateantispam = req[0].state
    bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateantilink = req[0].state
    bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateexpuluser = req[0].state
    bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statetimeout = req[0].state
    bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateremoverole = req[0].state
    bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statedepluser = req[0].state
    bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statedecouser = req[0].state
    bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statecreatewebhook = req[0].state
    bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statecreatechannel = req[0].state
    bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statecreaterole = req[0].state
    bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        statethreadcreate = req[0].state
    bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateban = req[0].state
    bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        stateroleadd = req[0].state
    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        stateaddbot = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultAntiBot")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2Antibot')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulAntibot')
            .setDefault(puni[punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('banniAntibot')
            .setDefault(puni[punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroleAntibot')
            .setDefault(puni[punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucunAntibot')
            .setDefault(puni[punition] == "Aucune."),
        );

        const select3 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select3Antibot')
            .setPlaceholder("Choisis les utilisateurs autorisés")
            .setMaxValues(3)
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel(`Utilisateur dans la liste des propriétaires.`)
            .setValue('propriouser')
            .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel(`Utilisateur dans la liste blanche.`)
            .setValue('blancheuser')
            .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel(`Utilisateur indépendant.`)
            .setValue('independantuser')
            .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
        );

        

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("Antibotperms")
        .setEmoji(permission == "on" ? "<:permsclose:1228311975516307456>" : "<:permsopen:1228311976858353746>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(state == "on" ? "Désactiver" : "Activer")
        .setCustomId("Antibotactivate") 
        .setEmoji(state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("Antibotlogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("AntibotlogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantAntibot")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterAntiBot")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        const row3 = new Discord.ActionRowBuilder()
        row3.addComponents(b, a)
        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)
        const msg = await message.reply({ embeds: [antibotEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3], fetchReply: true })

        const collector = msg.createMessageComponentCollector({ time: 120000 });
        
            collector.on("collect", async (interaction) => {
                if(interaction.user.id !== message.user.id) return // pas de message 000
                if(interaction.customId == "select2Antibot") {
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("Antibot", "")
                    await bot.db.query(`UPDATE antibot SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updateAntiBot(bot, message, interaction)
                    })
                } else if(interaction.customId == "Antibotactivate") {
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE antibot SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateAntiBot(bot, message, interaction)
                        })
                } else if(interaction.customId == "Antibotperms") {
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antibot SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAntiBot(bot, message, interaction)
                            })
                }else if(interaction.customId == "Antibotlogs") {
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE antibot SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAntiBot(bot, message, interaction)
                            })
                } else if(interaction.customId == "AntibotlogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antibot SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updateAntiBot(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antibot SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updateAntiBot(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })} else if(interaction.customId == "select3Antibot") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antibot SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateAntiBot(bot, message, interaction)
                            })
                } else if(interaction.customId == "afterAntiBot") {
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultAntiBot")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2Antibot')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulAntibot')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniAntibot')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleAntibot')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunAntibot')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("AntibotlogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantAntibot")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforeAntiBot")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3Antibot')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                        
                        await interaction.update({ embeds: [antibotEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
                            })
                } else if(interaction.customId == "beforeAntiBot") {
                    updateAntiBot(bot, message, interaction)
                } else if(interaction.customId == "utilisateurIndependantAntibot") {
                    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBot")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBot")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBot")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "returnAntiBot" || interaction.customId == "select" && interaction.values[0] == "addbot") {
                    updateAntiBot(bot, message, interaction)
                } else if(interaction.customId == "previousindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBot")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBot")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantAntiBot") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBot")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistAddBot')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                    
                } else if(interaction.customId == "userlistAddBot") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBot")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBot")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBot")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantAntiBot") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallAntiBot")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistAddbot')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                  } else if(interaction.customId == "optionslistAddbot") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM antibotlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBot")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBot")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBot")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "deleteallAntiBot") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antibotEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBot")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBot")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBot")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBot")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "select" && interaction.values[0] == "roleadd" || interaction.customId == "beforeaddrole" || interaction.customId == "returnaddrole") { //roleadd
                    updateRoleAdd(bot, message, interaction)
                  } else if(interaction.customId == "antiroleaddactivate"){
                    await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE antiroleadd SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateRoleAdd(bot, message, interaction)
                })
                  } else if(interaction.customId == "antiroleaddperms") {
                    await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antiroleadd SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateRoleAdd(bot, message, interaction)
                    })
                  } else if(interaction.customId == "antiroleaddlogs") {
                    await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE antiroleadd SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateRoleAdd(bot, message, interaction)
                        })
                  } else if(interaction.customId == "antiroleaddlogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antiroleadd SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updateRoleAdd(bot, message, interaction)
                        })
                    } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                        await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        msg2.delete(), collected.first().delete()
                        await bot.db.query(`UPDATE antiroleadd SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                        const embed = new Discord.EmbedBuilder()
                        .setColor("#2c2f33") 
                        .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                        message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        await wait(500),updateRoleAdd(bot, message, null, msg)
                    })
                } 
                })
            })
                  } else if(interaction.customId == "select3antiroleadd") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antiroleadd SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateRoleAdd(bot, message, interaction)
                    })
                } else if(interaction.customId == "select4antiroleadd") {
                    await bot.db.query(`SELECT * FROM antiroleaddperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        bot.db.query(`DELETE FROM antiroleaddperms WHERE guildId = ${message.guild.id}`);
                        interaction.values.forEach(async m => {
                            await bot.db.query(`SELECT * FROM antiroleaddperms WHERE guildId = "${message.guild.id}" AND perm = "${m}"`, async (err, req) => { 
                                if(req.length < 1) bot.db.query(`INSERT INTO antiroleaddperms (guildId, perm) VALUES ("${message.guild.id}", "${m}")`)
                            })
                        })
                        updateRoleAdd(bot, message, interaction)
                        
                    })
                } else if(interaction.customId =="afterantiroleadd") {
                    await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
            
                        const state = req[0].state
                        stateroleadd = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

                        await bot.db.query(`SELECT * FROM antiroleaddperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const permsNb = req.length
                            const select4 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select4antiroleadd')
                            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
                            .setMaxValues(23)
.setMinValues(0)                                

                            const perms = req.map(row => row.perm);
                            
                            select4.addOptions(
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Expulser des membres.")
                                .setValue('expulsemember')
                                .setDefault(perms.includes("expulsemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Bannir des membres")
                                .setValue('banmember')
                                .setDefault(perms.includes("banmember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Administrateur")
                                .setValue('administrator')
                                .setDefault(perms.includes("administrator") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les salons")
                                .setValue('managechannel')
                                .setDefault(perms.includes("managechannel") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer le serveur")
                                .setValue('manageguild')
                                .setDefault(perms.includes("manageguild") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Voir les logs du serveur ")
                                .setValue('viewlogsserver')
                                .setDefault(perms.includes("viewlogsserver") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les messages ")
                                .setValue('managemsg')
                                .setDefault(perms.includes("managemsg") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                                .setValue('pingeveryone')
                                .setDefault(perms.includes("pingeveryone") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Rendre les membres muets")
                                .setValue('muutemember')
                                .setDefault(perms.includes("muutemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mettre en sourdine des membres ")
                                .setValue('sourdinemember')
                                .setDefault(perms.includes("sourdinemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Déplacer des membres")
                                .setValue('moovemember')
                                .setDefault(perms.includes("moovemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Changer le pseudo")
                                .setValue('changenick')
                                .setDefault(perms.includes("changenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les pseudos")
                                .setValue('managenick')
                                .setDefault(perms.includes("managenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les rôles ")
                                .setValue('managerole')
                                .setDefault(perms.includes("managerole") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les webhooks")
                                .setValue('managewebhook')
                                .setDefault(perms.includes("managewebhook") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les émojis et les autocollants ")
                                .setValue('manageemoji')
                                .setDefault(perms.includes("manageemoji") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les évènements")
                                .setValue('manageevent')
                                .setDefault(perms.includes("manageevent") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les fils")
                                .setValue('managethread')
                                .setDefault(perms.includes("managethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des autocollants externes ")
                                .setValue('usesticker')
                                .setDefault(perms.includes("usesticker") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils publics")
                                .setValue('createpublicthread')
                                .setDefault(perms.includes("createpublicthread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des fils privés ")
                                .setValue('useprivatethread')
                                .setDefault(perms.includes("useprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils privés")
                                .setValue('createprivatethread')
                                .setDefault(perms.includes("createprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Exclure temporairement")
                                .setValue('kicktime')
                                .setDefault(perms.includes("kicktime") ? true : false),

                            )
                            await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const roleNb = req.length
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultRoleAdd")

                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2antiroleadd')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulantiroleadd')
                            .setDefault(puni[punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniantiroleadd')
                            .setDefault(puni[punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleantiroleadd')
                            .setDefault(puni[punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunantiroleadd')
                            .setDefault(puni[punition] == "Aucune."),
                        );
                
                        const a = new Discord.ButtonBuilder()
                        .setLabel("Permission")
                        .setCustomId("antiroleaddperms")
                        .setEmoji(permission == "on" ? "<:permsclose:1228311975516307456>" : "<:permsopen:1228311976858353746>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const b = new Discord.ButtonBuilder()
                        .setLabel(state == "on" ? "Désactiver" : "Activer")
                        .setCustomId("antiroleaddactivate")
                        .setEmoji(state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const c = new Discord.ButtonBuilder()
                        .setLabel("Logs")
                        .setCustomId("antiroleaddlogs")
                        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("antiroleaddlogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantantiroleadd")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const f = new Discord.ButtonBuilder()
                        .setCustomId("afterantiroleadd")
                        .setEmoji("<:better_after:1148608588454051840>")
                        .setStyle(Discord.ButtonStyle.Success)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("inclusaddrole")
                        .setEmoji("\<:folder:1229004211614646342>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setLabel('Inclus')
                        const h = new Discord.ButtonBuilder()
                        .setCustomId("beforeaddrole")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null

                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3antiroleadd')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(reste == "proprioblanche" || reste == "proprio" || reste == "proprioindependant" || reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(reste == "proprioblanche" || reste == "blanche"|| reste == "blancheindependant" || reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(reste == "proprioindependant" || reste == "blancheindependant" || reste == "independant" || reste == "proprioblancheindependant"),
                    );

    

                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                        const row5 = new Discord.ActionRowBuilder().addComponents(select4);
                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g, h)
                        
                        await interaction.update({ embeds: [antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)], components: [row, row2, row5, row4, row3] })
                            })
                        })
                    })
                } else if(interaction.customId == "utilisateurIndependantantiroleadd") {
                    bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateroleadd = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM antiroleaddperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const permsNb = req.length
                            const select4 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select4antiroleadd')
                            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
                            .setMaxValues(23)
.setMinValues(0)                                

                            const perms = req.map(row => row.perm);
                            
                            select4.addOptions(
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Expulser des membres.")
                                .setValue('expulsemember')
                                .setDefault(perms.includes("expulsemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Bannir des membres")
                                .setValue('banmember')
                                .setDefault(perms.includes("banmember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Administrateur")
                                .setValue('administrator')
                                .setDefault(perms.includes("administrator") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les salons")
                                .setValue('managechannel')
                                .setDefault(perms.includes("managechannel") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer le serveur")
                                .setValue('manageguild')
                                .setDefault(perms.includes("manageguild") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Voir les logs du serveur ")
                                .setValue('viewlogsserver')
                                .setDefault(perms.includes("viewlogsserver") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les messages ")
                                .setValue('managemsg')
                                .setDefault(perms.includes("managemsg") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                                .setValue('pingeveryone')
                                .setDefault(perms.includes("pingeveryone") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Rendre les membres muets")
                                .setValue('muutemember')
                                .setDefault(perms.includes("muutemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mettre en sourdine des membres ")
                                .setValue('sourdinemember')
                                .setDefault(perms.includes("sourdinemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Déplacer des membres")
                                .setValue('moovemember')
                                .setDefault(perms.includes("moovemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Changer le pseudo")
                                .setValue('changenick')
                                .setDefault(perms.includes("changenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les pseudos")
                                .setValue('managenick')
                                .setDefault(perms.includes("managenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les rôles ")
                                .setValue('managerole')
                                .setDefault(perms.includes("managerole") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les webhooks")
                                .setValue('managewebhook')
                                .setDefault(perms.includes("managewebhook") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les émojis et les autocollants ")
                                .setValue('manageemoji')
                                .setDefault(perms.includes("manageemoji") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les évènements")
                                .setValue('manageevent')
                                .setDefault(perms.includes("manageevent") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les fils")
                                .setValue('managethread')
                                .setDefault(perms.includes("managethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des autocollants externes ")
                                .setValue('usesticker')
                                .setDefault(perms.includes("usesticker") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils publics")
                                .setValue('createpublicthread')
                                .setDefault(perms.includes("createpublicthread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des fils privés ")
                                .setValue('useprivatethread')
                                .setDefault(perms.includes("useprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils privés")
                                .setValue('createprivatethread')
                                .setDefault(perms.includes("createprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Exclure temporairement")
                                .setValue('kicktime')
                                .setDefault(perms.includes("kicktime") ? true : false),

                            )
                            await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const roleNb = req.length
                        bot.db.query(`SELECT * FROM antiroleaddauser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], roleNb, permsNb)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantaddrole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantaddrole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnaddrole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                })
                    })
                } else if(interaction.customId == "previousindependant") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBot")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "addindependantaddrole") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAddRole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistAddRole')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistAddRole") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antiroleaddauser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antiroleaddauser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateroleadd = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM antiroleaddperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const permsNb = req.length
                            const select4 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select4antiroleadd')
                            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
                            .setMaxValues(23)
.setMinValues(0)                                

                            const perms = req.map(row => row.perm);
                            
                            select4.addOptions(
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Expulser des membres.")
                                .setValue('expulsemember')
                                .setDefault(perms.includes("expulsemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Bannir des membres")
                                .setValue('banmember')
                                .setDefault(perms.includes("banmember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Administrateur")
                                .setValue('administrator')
                                .setDefault(perms.includes("administrator") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les salons")
                                .setValue('managechannel')
                                .setDefault(perms.includes("managechannel") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer le serveur")
                                .setValue('manageguild')
                                .setDefault(perms.includes("manageguild") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Voir les logs du serveur ")
                                .setValue('viewlogsserver')
                                .setDefault(perms.includes("viewlogsserver") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les messages ")
                                .setValue('managemsg')
                                .setDefault(perms.includes("managemsg") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                                .setValue('pingeveryone')
                                .setDefault(perms.includes("pingeveryone") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Rendre les membres muets")
                                .setValue('muutemember')
                                .setDefault(perms.includes("muutemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mettre en sourdine des membres ")
                                .setValue('sourdinemember')
                                .setDefault(perms.includes("sourdinemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Déplacer des membres")
                                .setValue('moovemember')
                                .setDefault(perms.includes("moovemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Changer le pseudo")
                                .setValue('changenick')
                                .setDefault(perms.includes("changenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les pseudos")
                                .setValue('managenick')
                                .setDefault(perms.includes("managenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les rôles ")
                                .setValue('managerole')
                                .setDefault(perms.includes("managerole") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les webhooks")
                                .setValue('managewebhook')
                                .setDefault(perms.includes("managewebhook") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les émojis et les autocollants ")
                                .setValue('manageemoji')
                                .setDefault(perms.includes("manageemoji") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les évènements")
                                .setValue('manageevent')
                                .setDefault(perms.includes("manageevent") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les fils")
                                .setValue('managethread')
                                .setDefault(perms.includes("managethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des autocollants externes ")
                                .setValue('usesticker')
                                .setDefault(perms.includes("usesticker") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils publics")
                                .setValue('createpublicthread')
                                .setDefault(perms.includes("createpublicthread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des fils privés ")
                                .setValue('useprivatethread')
                                .setDefault(perms.includes("useprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils privés")
                                .setValue('createprivatethread')
                                .setDefault(perms.includes("createprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Exclure temporairement")
                                .setValue('kicktime')
                                .setDefault(perms.includes("kicktime") ? true : false),

                            )
                            await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const roleNb = req.length
                        bot.db.query(`SELECT * FROM antiroleaddauser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantaddrole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantaddrole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnaddrole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                    })
                })
                } else if(interaction.customId == "removeindependantaddrole") {
                    interaction.deferUpdate()
                    button7 = new Discord.ButtonBuilder()
                    .setCustomId("deletealladdrole")
                    .setEmoji(`<:poubelle:1228059993274580992>`)
                    .setStyle(Discord.ButtonStyle.Primary)
                    button8 = new Discord.ButtonBuilder()
                    .setCustomId("previousowner2")
                    .setEmoji(`<:better_previous:1148608585463496824> `)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    button9 = new Discord.ButtonBuilder()
                    .setCustomId("afterowner2")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setEmoji(`<:better_after:1148608588454051840>`)
    
                    if(req.length < 10) button9.setDisabled(true)
                    let menuSelect, aa
                    const menuOption = []; 
    
                    bot.db.query(`SELECT * FROM antiroleaddauser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    for (let i = 0; i < req.length; i++) {
                        const option = req[i];
    
                        const user = message.guild.members.cache.get(option.userId)
                        if(user) {
                            menuOption.push({ 
                                name: `${user.user.username} (ID: ${option.userId})`, 
                                value: option.userId
                            }); 
                        } else {
                        menuOption.push({ 
                            name: `Introuvable (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                        }
                    }
    
    
                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistAddrole')
                    .setMaxValues(req.length)
                    .setMinValues(1)
                    
                    menuOption.forEach(opt => {
                    aa = new Discord.StringSelectMenuOptionBuilder()
                            .setLabel(opt.name)
                            .setValue(opt.value)
                        menuSelect.addOptions(aa);
                    });
                    
                    
                    rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                    msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                    })
                } else if(interaction.customId == "deletealladdrole") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antiroleaddauser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateroleadd = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antiroleaddauser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantaddrole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantaddrole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantaddrole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnaddrole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "afterindependantaddrole") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantirole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "inclusaddrole") {
                    let selectremove, aa
                    const menuOption = []; 
                    const roleselect = new Discord.RoleSelectMenuBuilder()
                    .setMaxValues(25)
                    .setCustomId("roleselectmenu")
                    .setPlaceholder(`Choisis les rôles que tu souhaite inclure. (${message.guild.roles.cache.size})`)
                    await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        if(req.length < 1) {
                            selectremove = new Discord.StringSelectMenuBuilder().setCustomId("removeroleseletroleadd").setPlaceholder(`Choisis les rôles que tu souhaites pas inclure. (${req.length})`).setDisabled(true).addOptions(new Discord.StringSelectMenuOptionBuilder().setLabel("a").setValue("a"))
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnaddrole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)

                            const rows = new Discord.ActionRowBuilder().addComponents(roleselect)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(selectremove)
                            const rows3 = new Discord.ActionRowBuilder().addComponents(button6)

                            interaction.update({ components: [rows, rows2, rows3]})

                        } else {
                            for (let i = 0; i < req.length; i++) {
                                const option = req[i];
            
                                const role = message.guild.roles.cache.get(option.roleId)
                                if(role) {
                                    menuOption.push({ 
                                        name: `${role.name} (ID: ${option.roleId})`, 
                                        value: option.roleId
                                    }); 
                                } else {
                                menuOption.push({ 
                                    name: `Introuvable (ID: ${option.roleId})`, 
                                    value: option.roleId
                                }); 
                                }
                            }

                            selectremove = new Discord.StringSelectMenuBuilder()
                            .setCustomId('rolesRoleAddREMOVE')
                            .setMaxValues(req.length)
                            .setMinValues(1)
                            .setMaxValues(menuOption.length)

                            menuOption.forEach(opt => {
                                aa = new Discord.StringSelectMenuOptionBuilder()
                                        .setLabel(opt.name)
                                        .setValue(opt.value)
                                        selectremove.addOptions(aa);
                              });

                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnaddrole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)

                            const rows = new Discord.ActionRowBuilder().addComponents(roleselect)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(selectremove)
                            const rows3 = new Discord.ActionRowBuilder().addComponents(button6)

                            interaction.update({ components: [rows, rows2, rows3]})

                        }
                        
                    })

                } else if(interaction.customId == "roleselectmenu") {
                    await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        interaction.values.forEach(async m => {
                            await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}" AND roleId = "${interaction.values}"`, async (err, req) => {
                                if(req.length < 1) bot.db.query(`INSERT INTO antiroleaddrole (guildId, roleId) VALUES (${message.guild.id}, ${m})`)
                            })
                        })
                        updateRoleAdd(bot, message, interaction)
                    })
                } else if(interaction.customId == "rolesRoleAddREMOVE") {
                    await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        interaction.values.forEach(async m => {
                            await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}" AND roleId = "${interaction.values}"`, async (err, req) => {
                                bot.db.query(`DELETE FROM antiroleaddrole WHERE roleId = ${m} AND guildId = "${message.guild.id}"`);
                            })
                        })
                        await wait(500)
                        updateRoleAdd(bot, message, interaction)
                    })
                } else if(interaction.customId == "optionslistAddrole") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM antiroleaddauser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    updateRoleAdd(bot, message, interaction)
                } else if(interaction.customId == "select2antiroleadd") {
                    await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("antiroleadd", "")
                        await bot.db.query(`UPDATE antiroleadd SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateRoleAdd(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "ban" || interaction.customId == "beforeAntiban" || interaction.customId == "returnAntiBan") {
                    updateAntiBan(bot, message, interaction)
                } else if(interaction.customId == "afterAntiban") {
                    await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    stateban = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultBan")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2Antiban')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expulAntiban')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('banniAntiban')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroleAntiban')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucunAntiban')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                
                    const a = new Discord.ButtonBuilder()
                    .setLabel("Permission")
                    .setCustomId("Antibanperms")
                    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const b = new Discord.ButtonBuilder()
                    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                    .setCustomId("Antibanactivate")
                    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const c = new Discord.ButtonBuilder()
                    .setLabel("Logs")
                    .setCustomId("Antibanlogs")
                    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("AntibanlogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantAntiban")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("afterAntiban")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("intervalleAntiban")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setLabel("Intervalle")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("maxAntiban")
                    .setEmoji("<:__:1229876600590438452>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Maximum")
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforeAntiban")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3Antiban')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    row3.addComponents(h, i)
                    
                await interaction.update({ embeds: [updateantiban(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
                    
                    })
                } else if(interaction.customId == "Antibanactivate") {
                    await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antiban SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAntiBan(bot, message, interaction)
                    })
                } else if(interaction.customId == "Antibanperms") {
                    await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antiban SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateAntiBan(bot, message, interaction)
                    })
                } else if(interaction.customId == "Antibanlogs") {
                    await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE antiban SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAntiBan(bot, message, interaction)
                    })
                } else if(interaction.customId == "AntibanlogsChannelLogs") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antiban SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updateAntiBan(bot, message, null, msg)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antiban SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updateAntiBan(bot, message, null, msg)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                    })
                } else if(interaction.customId == "select3Antiban") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antiban SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateAntiBan(bot, message, interaction)
                    })
                } else if(interaction.customId == "utilisateurIndependantAntiban") {
                    bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateban = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibanlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateantiban(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateantiban(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBan")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBan")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBan")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "previousindependantAntiBan") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBan")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBan")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantAntiBan") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBan")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistAntiBan')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistAntiBan") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateban = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibanlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateantiban(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateantiban(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBan")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBan")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBan")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantAntiBan") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallAntiBan")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM antibanlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistAntiBan')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "deleteallAntiBan") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateban = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibanlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateantiban(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateantiban(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBan")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBan")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBan")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "optionslistAntiBan") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM antibanlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)

                    bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateban = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antibanlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateantiban(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateantiban(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantAntiBan")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantAntiBan")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantAntiBan")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnAntiBan")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "intervalleAntiban") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE antiban SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateAntiBan(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "maxAntiban") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre d'action \`maximal\` que l'utilisateur peut éxécuter, écrit \`cancel\` pour \`annuler.\``)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE antiban SET maximum = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateAntiBan(bot, message, null, msg)
                            }
                        }

                    })
                } else if(interaction.customId == "select2Antiban") {
                    await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("Antiban", "")
                        await bot.db.query(`UPDATE antiban SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateAntiBan(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "threadcreate" || interaction.customId == "beforeAntithreadcreate" || interaction.customId == "returnantithreadcreate") {
                    updateAntiThreadCreate(bot, message, interaction)
                } else if(interaction.customId == "Antithreadcreateactivate") {
                    await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antithreadcreate SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAntiThreadCreate(bot, message, interaction)
                            })
                } else if(interaction.customId == "Antithreadcreatelogs") {
                    await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE antithreadcreate SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAntiThreadCreate(bot, message, interaction)
                        })
                } else if(interaction.customId == "AntithreadcreatelogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antithreadcreate SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updateAntiThreadCreate(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antithreadcreate SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updateAntiThreadCreate(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })
                } else if(interaction.customId == "select3Antithreadcreate") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antithreadcreate SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateAntiThreadCreate(bot, message, interaction)
                    })
                } else if(interaction.customId == "afterAntithreadcreate") {
                    await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    statethreadcreate = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                    const duree = req[0].duree
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultthreadcreate")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2Antithreadcreate')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expulAntithreadcreate')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('banniAntithreadcreate')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Exclure temporairement.")
                        .setValue('excluretempoAntithreadcreate')
                        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroleAntithreadcreate')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucunAntithreadcreate')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );

                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("AntithreadcreatelogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantAntithreadcreate")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("ignorerAntithreadcreate")
                    .setEmoji("<:folder:1229004211614646342>")
                    .setLabel("Ignorer")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforeAntithreadcreate")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const j = new Discord.ButtonBuilder()
                    .setCustomId("dureeAntithreadcreate")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Durée")
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3Antithreadcreate')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e
    
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    if(punition == "excluretempo") row3.addComponents(j)
                    row3.addComponents(i)
                    await bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    if(interaction) await interaction.update({ embeds: [antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null)], components: [row, row2, row4, row3] })
                    else await msg.edit({ embeds: [antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null)], components: [row, row2, row4, row3] })
                    })
                })
                } else if(interaction.customId == "utilisateurIndependantAntithreadcreate") {
                    bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statethreadcreate = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM antithreadcreatelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantithreadcreate")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantithreadcreate")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantithreadcreate")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "previousindependantantithreadcreate") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantithreadcreate")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantantithreadcreate") {
                    if (currentPage < totalPages - 1) {
                        currentPage++;
                        button1.setDisabled(false);
                        button4.setDisabled(currentPage === totalPages - 1);
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const button6 = new Discord.ButtonBuilder()
                        .setCustomId("returnantithreadcreate")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
    
                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                        msg.edit({
                            embeds: [embeds[currentPage]],
                            components: [rows, rows2],
                          });
                        }
                } else if(interaction.customId == "addindependantantithreadcreate") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantithreadcreate")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistAntithreadcreate')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistAntithreadcreate") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antithreadcreatelistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antithreadcreatelistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statethreadcreate = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM antithreadcreatelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantithreadcreate")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantithreadcreate")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantithreadcreate")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })                    
                } else if(interaction.customId == "removeindependantantithreadcreate") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallantithreadcreate")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM antithreadcreatelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistantithreadcreate')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
            })
                } else if(interaction.customId == "deleteallantithreadcreate") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antithreadcreatelistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statethreadcreate = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM antithreadcreatelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantithreadcreate")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantithreadcreate")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantithreadcreate")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantithreadcreate")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "optionslistantithreadcreate") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM antithreadcreatelistuser WHERE userId = ${id}`);
                    })
          
                  await wait(500)

                  bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    let ok;
            
                    const state = req[0].state
                    statethreadcreate = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                    const duree = req[0].duree
            
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                    bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const nbchannel = req.length
                    bot.db.query(`SELECT * FROM antithreadcreatelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        embeds = []
                        currentPage = 0
                        totalPages = Math.ceil(req.length / itemsPerPage);
                        if(req.length < 1) {
                            const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                            embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                            totalPages = totalPages + 1
                            embeds.push(embed)
                        } else {
                            for (let i = 0; i < req.length; i += itemsPerPage) {
                                let users = ""
                                for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                const member = bot.users.cache.get(req[j].userId) 
                                    if(member) {
                                        users += `${member.username} (ID: ${req[j].userId})\n`;
                                    }
                                }
                                if(users === "") description = "Aucun."
                                const embed = antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                embeds.push(embed);
                            }
                        }
    

                        button1 = new Discord.ButtonBuilder()
                        .setCustomId("previousindependantantithreadcreate")
                        .setEmoji(`<:better_previous:1148608585463496824> `)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button2 = new Discord.ButtonBuilder()
                        .setCustomId("addindependantantithreadcreate")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_add:1148608590110789773>`)
                        button3 = new Discord.ButtonBuilder()
                        .setCustomId("removeindependantantithreadcreate")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_remove:1148608592937754725>`)
                        button4 = new Discord.ButtonBuilder()
                        .setCustomId("afterindependantantithreadcreate")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_after:1148608588454051840>`)
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageindependantantithreadcreate")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button6 = new Discord.ButtonBuilder()
                        .setCustomId("returnantithreadcreate")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        
                        if(req.length < 10) button4.setDisabled(true)
                        if(req.length < 1) button3.setDisabled(true)

                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                        msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                    
                })})
            })
                } else if(interaction.customId == "select2Antithreadcreate") {
                    await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("Antithreadcreate", "")
                        await bot.db.query(`UPDATE antithreadcreate SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateAntiThreadCreate(bot, message, interaction)
                    })
                } else if(interaction.customId == "ignorerAntithreadcreate") {
                    bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const channelList = new Discord.ChannelSelectMenuBuilder()
                    .setCustomId('channelantithreadcreate')
                    .setPlaceholder("Choisis les salons que tu souhaites ignorer")
                    .setMaxValues(25);
                    let menuSelect, aa
                    if(req.length > 0) {
                    const menuOption = []; 

                    for (let i = 0; i < req.length; i++) {
                        const option = req[i];

                        const channel = message.guild.channels.cache.get(option.channelId)
                        if(channel) {
                            menuOption.push({ 
                                name: `${channel.name} (ID: ${option.channelId})`, 
                                value: option.channelId
                            }); 
                        } else {
                        menuOption.push({ 
                            name: `Introuvable (ID: ${option.channelId})`, 
                            value: option.channelId
                        }); 
                        }
                    }


                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistantithreadcreate2')
                    .setMaxValues(req.length)
                    .setMinValues(1)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    
                    menuOption.forEach(opt => {
                    aa = new Discord.StringSelectMenuOptionBuilder()
                            .setLabel(opt.name)
                            .setValue(opt.value)
                            .setEmoji("<:hashtag:1230136272530444329>")
                        menuSelect.addOptions(aa);
                    });
                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                } else {
                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistantithreadcreate2')
                    .setDisabled(true)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    .addOptions( new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("https://discord.gg/uhq")
                        .setValue("salut")
                        .setEmoji("<:hashtag:1230136272530444329>")
                    )

                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                   
                }
                })

                } else if(interaction.customId == "channelantithreadcreate") {
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}" AND channelId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antithreadcreatechannel (guildId, channelId) VALUES ("${message.guild.id}", "${id}")`)
                    })
                    })

                    await wait(500)

                    updateAntiThreadCreate(bot, message, interaction)
                } else if(interaction.customId == "optionslistantithreadcreate2") {
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM antithreadcreatechannel WHERE channelId = ${id}`);
                    })
          
                  await wait(500)

                  updateAntiThreadCreate(bot, message, interaction)
                } else if(interaction.customId == "dureeAntithreadcreate") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel\` pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE antithreadcreate SET duree = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateAntiThreadCreate(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "createrole" || interaction.customId == "beforecreaterole" || interaction.customId == "returncreaterole") {
                    updateAnticreaterole(bot, message, interaction)
                } else if(interaction.customId == "select2createrole") {
                    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("createrole", "")
                        await bot.db.query(`UPDATE createrole SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreaterole(bot, message, interaction)
                    })
                } else if(interaction.customId == "createroleactivate") {
                    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createrole SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreaterole(bot, message, interaction)
                            })
                } else if(interaction.customId == "createroleperms") {
                    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createrole SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreaterole(bot, message, interaction)
                    })
                } else if(interaction.customId == "createrolelogs") {
                    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE createrole SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreaterole(bot, message, interaction)
                    })
                } else if(interaction.customId == "createrolelogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE createrole SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            await updateAnticreaterole(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE createrole SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), await updateAnticreaterole(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })
                } else if(interaction.customId == "select3createrole") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createrole SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreaterole(bot, message, interaction)
                    })
                } else if(interaction.customId == "aftercreaterole") {
                    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statecreaterole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                    
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultcreaterole")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2createrole')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulcreaterole')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('bannicreaterole')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprrolecreaterole')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucuncreaterole')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const a = new Discord.ButtonBuilder()
                        .setLabel("Permission")
                        .setCustomId("createroleperms")
                        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const b = new Discord.ButtonBuilder()
                        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                        .setCustomId("createroleactivate")
                        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const c = new Discord.ButtonBuilder()
                        .setLabel("Logs")
                        .setCustomId("createrolelogs")
                        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("createrolelogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantcreaterole")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const f = new Discord.ButtonBuilder()
                        .setCustomId("aftercreaterole")
                        .setEmoji("<:better_after:1148608588454051840>")
                        .setStyle(Discord.ButtonStyle.Success)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforecreaterole")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3createrole')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                    );
                
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                
                        await interaction.update({ embeds: [anticreaterole(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        
                        })
                } else if(interaction.customId == "utilisateurIndependantcreaterole") {
                    bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createrolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreaterole(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreaterole(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "previousindependantcreaterole") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreaterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantcreaterole") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreaterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantcreaterole") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreaterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistcreaterole')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistcreaterole") {
                    nteraction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createrolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreaterole(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreaterole(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantcreaterole") {
                    nteraction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallcreaterole")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM createrolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistcreaterole')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                } else if(interaction.customId == "optionslistcreaterole") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM createrolelistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createrolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreaterole(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreaterole(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "deleteallcreaterole") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM createrolelistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createrolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateAnticreaterole(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateAnticreaterole(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "select" && interaction.values[0] == "createchannel" || interaction.customId == "beforecreatechannel" || interaction.customId == "returncreatechannel") {
                    updateAnticreatechannel(bot, message, interaction)
                } else if(interaction.customId == "select2createchannel") {
                    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("createchannel", "")
                        await bot.db.query(`UPDATE createchannel SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatechannel(bot, message, interaction)
                    })
                } else if(interaction.customId == "createchannelactivate") {
                    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createchannel SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatechannel(bot, message, interaction)
                            })
                } else if(interaction.customId == "createchannelperms") {
                    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createchannel SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatechannel(bot, message, interaction)
                    })
                } else if(interaction.customId == "createchannellogs") {
                    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE createchannel SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatechannel(bot, message, interaction)
                    })
                } else if(interaction.customId == "createchannellogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE createchannel SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            await updateAnticreatechannel(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE createchannel SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), await updateAnticreatechannel(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })
                } else if(interaction.customId == "select3createchannel") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createchannel SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatechannel(bot, message, interaction)
                    })
                } else if(interaction.customId == "aftercreatechannel") {
                    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statecreatechannel = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                    
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultcreatechannel")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2createchannel')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulcreatechannel')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('bannicreatechannel')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprrolecreatechannel')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucuncreatechannel')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const a = new Discord.ButtonBuilder()
                        .setLabel("Permission")
                        .setCustomId("createchannelperms")
                        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const b = new Discord.ButtonBuilder()
                        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                        .setCustomId("createchannelactivate")
                        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const c = new Discord.ButtonBuilder()
                        .setLabel("Logs")
                        .setCustomId("createchannellogs")
                        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("createchannellogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantcreatechannel")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const f = new Discord.ButtonBuilder()
                        .setCustomId("aftercreatechannel")
                        .setEmoji("<:better_after:1148608588454051840>")
                        .setStyle(Discord.ButtonStyle.Success)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforecreatechannel")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3createchannel')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                    );
                
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                
                        await interaction.update({ embeds: [anticreatechannel(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        
                        })
                } else if(interaction.customId == "utilisateurIndependantcreatechannel") {
                    bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createchannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreatechannel(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreatechannel(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "previousindependantcreatechannel") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreatechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantcreatechannel") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreatechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantcreatechannel") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreatechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistcreatechannel')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistcreatechannel") {
                    nteraction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createchannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreatechannel(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreatechannel(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantcreatechannel") {
                    nteraction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallcreatechannel")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM createchannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistcreatechannel')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                } else if(interaction.customId == "optionslistcreatechannel") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM createchannellistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createchannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreatechannel(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreatechannel(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "deleteallcreatechannel") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM createchannellistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createchannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateAnticreatechannel(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateAnticreatechannel(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "select" && interaction.values[0] == "createwebhook" || interaction.customId == "beforecreatewebhook" || interaction.customId == "returncreatewebhook") {
                    updateAnticreatewebhook(bot, message, interaction)
                } else if(interaction.customId == "select2createwebhook") {
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("createwebhook", "")
                        await bot.db.query(`UPDATE createwebhook SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatewebhook(bot, message, interaction)
                    })
                } else if(interaction.customId == "createwebhookactivate") {
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createwebhook SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatewebhook(bot, message, interaction)
                            })
                } else if(interaction.customId == "createwebhookperms") {
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createwebhook SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatewebhook(bot, message, interaction)
                    })
                } else if(interaction.customId == "createwebhooklogs") {
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE createwebhook SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatewebhook(bot, message, interaction)
                    })
                } else if(interaction.customId == "createwebhooklogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE createwebhook SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            await updateAnticreatewebhook(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE createwebhook SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), await updateAnticreatewebhook(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })
                } else if(interaction.customId == "select3createwebhook") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createwebhook SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatewebhook(bot, message, interaction)
                    })
                } else if(interaction.customId == "aftercreatewebhook") {
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statecreatewebhook = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                    
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultcreatewebhook")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2createwebhook')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulcreatewebhook')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('bannicreatewebhook')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprrolecreatewebhook')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucuncreatewebhook')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("createwebhooklogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantcreatewebhook")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const f = new Discord.ButtonBuilder()
                        .setCustomId("aftercreatewebhook")
                        .setEmoji("<:better_after:1148608588454051840>")
                        .setStyle(Discord.ButtonStyle.Success)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforecreatewebhook")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null

                        const select4 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select4createwebhook')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Clonnage du salon.`)
                        .setValue('clonnchannel')
                        .setDefault(req[0].action == "clonnchannel"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Suppression.`)
                        .setValue('supprchannel')
                        .setDefault(req[0].action == "supprchannel"),
                    );
                
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3createwebhook')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .setDisabled(req[0].action == "clonnchannel")
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                    );
                
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row5 = new Discord.ActionRowBuilder().addComponents(select4)
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                
                        await interaction.update({ embeds: [anticreatewebhook(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], puni[req[0].action])], components: [row, row2, row5, row4, row3] })
        
                        })
                } else if(interaction.customId == "utilisateurIndependantcreatewebhook") {
                    bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const action = puni[req[0].action]
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createwebhooklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreatewebhook(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], action)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreatewebhook(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], action)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatewebhook")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatewebhook")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatewebhook")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "previousindependantcreatewebhook") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreatewebhook")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantcreatewebhook") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreatewebhook")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantcreatewebhook") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returncreatewebhook")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistcreatewebhook')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistcreatewebhook") {
                    nteraction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const action = puni[req[0].action]
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createwebhooklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreatewebhook(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], action)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreatewebhook(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], action)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatewebhook")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatewebhook")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatewebhook")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantcreatewebhook") {
                    nteraction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallcreatewebhook")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM createwebhooklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistcreatewebhook')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                } else if(interaction.customId == "optionslistcreatewebhook") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM createwebhooklistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const action = puni[req[0].action]
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createwebhooklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = anticreatewebhook(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], action)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = anticreatewebhook(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], action)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatewebhook")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatewebhook")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatewebhook")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "deleteallcreatewebhook") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM createwebhooklistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const action = puni[req[0].action]
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM createwebhooklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateAnticreatewebhook(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], action)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateAnticreatewebhook(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], action)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantcreatewebhook")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantcreatewebhook")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantcreatewebhook")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returncreatewebhook")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "select4createwebhook") {
                    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE createwebhook SET action = "${interaction.values[0]}" WHERE guildId = ${message.guild.id}`);
                        updateAnticreatewebhook(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "decouser" || interaction.customId == "beforedecouser" || interaction.customId == "returndecouser") {
                    updatedecouser(bot, message, interaction)
                } else if(interaction.customId == "afterdecouser") {
                    await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    statedecouser = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdecouser")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2decouser')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expuldecouser')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('bannidecouser')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroledecouser')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucundecouser')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                
                    const a = new Discord.ButtonBuilder()
                    .setLabel("Permission")
                    .setCustomId("decouserperms")
                    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const b = new Discord.ButtonBuilder()
                    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                    .setCustomId("decouseractivate")
                    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const c = new Discord.ButtonBuilder()
                    .setLabel("Logs")
                    .setCustomId("decouserlogs")
                    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("decouserlogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantdecouser")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("afterdecouser")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("intervalledecouser")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setLabel("Intervalle")
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("maxdecouser")
                    .setEmoji("<:__:1229876600590438452>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Maximum")
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforedecouser")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3decouser')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    row3.addComponents(h, i)
                    
                await interaction.update({ embeds: [antidecouser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
                    
                    })
                } else if(interaction.customId == "decouseractivate") {
                    await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE decouser SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedecouser(bot, message, interaction)
                    })
                } else if(interaction.customId == "decouserperms") {
                    await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE decouser SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatedecouser(bot, message, interaction)
                    })
                } else if(interaction.customId == "decouserlogs") {
                    await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE decouser SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedecouser(bot, message, interaction)
                    })
                } else if(interaction.customId == "decouserlogsChannelLogs") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE decouser SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatedecouser(bot, message, null, msg)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE decouser SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatedecouser(bot, message, null, msg)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                    })
                } else if(interaction.customId == "select3decouser") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE decouser SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatedecouser(bot, message, interaction)
                    })
                } else if(interaction.customId == "utilisateurIndependantdecouser") {
                    bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedecouser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM decouserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidecouser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidecouser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdecouser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdecouser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndecouser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "previousindependantdecouser") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndecouser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndecouser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantdecouser") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndecouser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistdecouser')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistdecouser") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedecouser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM decouserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidecouser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidecouser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdecouser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdecouser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndecouser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantdecouser") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deletealldecouser")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM decouserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistdecouser')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "deletealldecouser") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedecouser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM decouserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidecouser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidecouser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdecouser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdecouser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndecouser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "optionslistdecouser") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM decouserlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)

                    bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedecouser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM decouserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidecouser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidecouser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdecouser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdecouser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdecouser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndecouser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "intervalledecouser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE decouser SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatedecouser(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "maxdecouser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre d'action \`maximal\` que l'utilisateur peut éxécuter, écrit \`cancel\` pour \`annuler.\``)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE decouser SET maximum = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatedecouser(bot, message, null, msg)
                            }
                        }

                    })
                } else if(interaction.customId == "select2decouser") {
                    await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("decouser", "")
                        await bot.db.query(`UPDATE decouser SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updatedecouser(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "depluser" || interaction.customId == "beforedepluser" || interaction.customId == "returndepluser") {
                    updatedepluser(bot, message, interaction)
                } else if(interaction.customId == "afterdepluser") {
                    await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    statedepluser = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdepluser")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2depluser')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expuldepluser')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('bannidepluser')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroledepluser')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucundepluser')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                
                    const a = new Discord.ButtonBuilder()
                    .setLabel("Permission")
                    .setCustomId("depluserperms")
                    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const b = new Discord.ButtonBuilder()
                    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                    .setCustomId("depluseractivate")
                    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const c = new Discord.ButtonBuilder()
                    .setLabel("Logs")
                    .setCustomId("depluserlogs")
                    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("depluserlogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantdepluser")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("afterdepluser")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("intervalledepluser")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setLabel("Intervalle")
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("maxdepluser")
                    .setEmoji("<:__:1229876600590438452>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Maximum")
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforedepluser")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3depluser')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    row3.addComponents(h, i)
                    
                await interaction.update({ embeds: [antidepluser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
                    
                    })
                } else if(interaction.customId == "depluseractivate") {
                    await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE depluser SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedepluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "depluserperms") {
                    await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE depluser SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatedepluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "depluserlogs") {
                    await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE depluser SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedepluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "depluserlogsChannelLogs") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE depluser SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatedepluser(bot, message, null, msg)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE depluser SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatedepluser(bot, message, null, msg)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                    })
                } else if(interaction.customId == "select3depluser") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE depluser SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatedepluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "utilisateurIndependantdepluser") {
                    bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedepluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM depluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidepluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidepluser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdepluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdepluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndepluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "previousindependantdepluser") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndepluser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndepluser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantdepluser") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndepluser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistdepluser')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistdepluser") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedepluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM depluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidepluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidepluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdepluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdepluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndepluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantdepluser") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deletealldepluser")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM depluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistdepluser')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "deletealldepluser") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedepluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM depluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidepluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidepluser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdepluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdepluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndepluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "optionslistdepluser") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM depluserlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)

                    bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statedepluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM depluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antidepluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antidepluser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdepluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdepluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdepluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndepluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "intervalledepluser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE depluser SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatedepluser(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "maxdepluser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre d'action \`maximal\` que l'utilisateur peut éxécuter, écrit \`cancel\` pour \`annuler.\``)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE depluser SET maximum = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatedepluser(bot, message, null, msg)
                            }
                        }

                    })
                } else if(interaction.customId == "select2depluser") {
                    await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("depluser", "")
                        await bot.db.query(`UPDATE depluser SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updatedepluser(bot, message, interaction)
                    })
                }  else if(interaction.customId == "select" && interaction.values[0] == "removerole" || interaction.customId == "beforeremoverole" || interaction.customId == "returnremoverole") { //removerole
                    updateremoverole(bot, message, interaction)
                  } else if(interaction.customId == "removeroleactivate"){
                    await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE removerole SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateremoverole(bot, message, interaction)
                })
                  } else if(interaction.customId == "removeroleperms") {
                    await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE removerole SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateremoverole(bot, message, interaction)
                    })
                  } else if(interaction.customId == "removerolelogs") {
                    await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE removerole SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateremoverole(bot, message, interaction)
                        })
                  } else if(interaction.customId == "removerolelogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE removerole SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updateremoverole(bot, message, interaction)
                        })
                    } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                        await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        msg2.delete(), collected.first().delete()
                        await bot.db.query(`UPDATE removerole SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                        const embed = new Discord.EmbedBuilder()
                        .setColor("#2c2f33") 
                        .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                        message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        await wait(500),updateremoverole(bot, message, null, msg)
                    })
                } 
                })
            })
                  } else if(interaction.customId == "select3removerole") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE removerole SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateremoverole(bot, message, interaction)
                    })
                } else if(interaction.customId == "select4removerole") {
                    await bot.db.query(`SELECT * FROM removeroleperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        bot.db.query(`DELETE FROM removeroleperms WHERE guildId = ${message.guild.id}`);
                        interaction.values.forEach(async m => {
                            await bot.db.query(`SELECT * FROM removeroleperms WHERE guildId = "${message.guild.id}" AND perm = "${m}"`, async (err, req) => { 
                                if(req.length < 1) bot.db.query(`INSERT INTO removeroleperms (guildId, perm) VALUES ("${message.guild.id}", "${m}")`)
                            })
                        })
                        updateremoverole(bot, message, interaction)
                        
                    })
                } else if(interaction.customId =="afterremoverole") {
                    await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
            
                        const state = req[0].state
                        stateremoverole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

                        await bot.db.query(`SELECT * FROM removeroleperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const permsNb = req.length
                            const select4 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select4removerole')
                            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
                            .setMaxValues(23)
.setMinValues(0)                                

                            const perms = req.map(row => row.perm);
                            
                            select4.addOptions(
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Expulser des membres.")
                                .setValue('expulsemember')
                                .setDefault(perms.includes("expulsemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Bannir des membres")
                                .setValue('banmember')
                                .setDefault(perms.includes("banmember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Administrateur")
                                .setValue('administrator')
                                .setDefault(perms.includes("administrator") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les salons")
                                .setValue('managechannel')
                                .setDefault(perms.includes("managechannel") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer le serveur")
                                .setValue('manageguild')
                                .setDefault(perms.includes("manageguild") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Voir les logs du serveur ")
                                .setValue('viewlogsserver')
                                .setDefault(perms.includes("viewlogsserver") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les messages ")
                                .setValue('managemsg')
                                .setDefault(perms.includes("managemsg") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                                .setValue('pingeveryone')
                                .setDefault(perms.includes("pingeveryone") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Rendre les membres muets")
                                .setValue('muutemember')
                                .setDefault(perms.includes("muutemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mettre en sourdine des membres ")
                                .setValue('sourdinemember')
                                .setDefault(perms.includes("sourdinemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Déplacer des membres")
                                .setValue('moovemember')
                                .setDefault(perms.includes("moovemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Changer le pseudo")
                                .setValue('changenick')
                                .setDefault(perms.includes("changenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les pseudos")
                                .setValue('managenick')
                                .setDefault(perms.includes("managenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les rôles ")
                                .setValue('managerole')
                                .setDefault(perms.includes("managerole") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les webhooks")
                                .setValue('managewebhook')
                                .setDefault(perms.includes("managewebhook") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les émojis et les autocollants ")
                                .setValue('manageemoji')
                                .setDefault(perms.includes("manageemoji") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les évènements")
                                .setValue('manageevent')
                                .setDefault(perms.includes("manageevent") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les fils")
                                .setValue('managethread')
                                .setDefault(perms.includes("managethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des autocollants externes ")
                                .setValue('usesticker')
                                .setDefault(perms.includes("usesticker") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils publics")
                                .setValue('createpublicthread')
                                .setDefault(perms.includes("createpublicthread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des fils privés ")
                                .setValue('useprivatethread')
                                .setDefault(perms.includes("useprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils privés")
                                .setValue('createprivatethread')
                                .setDefault(perms.includes("createprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Exclure temporairement")
                                .setValue('kicktime')
                                .setDefault(perms.includes("kicktime") ? true : false),

                            )
                            await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const roleNb = req.length
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultremoverole")

                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2removerole')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulremoverole')
                            .setDefault(puni[punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniremoverole')
                            .setDefault(puni[punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleremoverole')
                            .setDefault(puni[punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunremoverole')
                            .setDefault(puni[punition] == "Aucune."),
                        );
                
                        const a = new Discord.ButtonBuilder()
                        .setLabel("Permission")
                        .setCustomId("removeroleperms")
                        .setEmoji(permission == "on" ? "<:permsclose:1228311975516307456>" : "<:permsopen:1228311976858353746>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const b = new Discord.ButtonBuilder()
                        .setLabel(state == "on" ? "Désactiver" : "Activer")
                        .setCustomId("removeroleactivate")
                        .setEmoji(state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const c = new Discord.ButtonBuilder()
                        .setLabel("Logs")
                        .setCustomId("removerolelogs")
                        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("removerolelogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantremoverole")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const f = new Discord.ButtonBuilder()
                        .setCustomId("afterremoverole")
                        .setEmoji("<:better_after:1148608588454051840>")
                        .setStyle(Discord.ButtonStyle.Success)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("inclusremoverole")
                        .setEmoji("\<:folder:1229004211614646342>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setLabel('Inclus')
                        const h = new Discord.ButtonBuilder()
                        .setCustomId("beforeremoverole")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null

                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3removerole')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(reste == "proprioblanche" || reste == "proprio" || reste == "proprioindependant" || reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(reste == "proprioblanche" || reste == "blanche"|| reste == "blancheindependant" || reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(reste == "proprioindependant" || reste == "blancheindependant" || reste == "independant" || reste == "proprioblancheindependant"),
                    );

    

                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                        const row5 = new Discord.ActionRowBuilder().addComponents(select4);
                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g, h)
                        
                        await interaction.update({ embeds: [removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)], components: [row, row2, row5, row4, row3] })
                            })
                        })
                    })
                } else if(interaction.customId == "utilisateurIndependantremoverole") {
                    bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateremoverole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM removeroleperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const permsNb = req.length
                            const select4 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select4removerole')
                            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
                            .setMaxValues(23)
.setMinValues(0)                                

                            const perms = req.map(row => row.perm);
                            
                            select4.addOptions(
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Expulser des membres.")
                                .setValue('expulsemember')
                                .setDefault(perms.includes("expulsemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Bannir des membres")
                                .setValue('banmember')
                                .setDefault(perms.includes("banmember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Administrateur")
                                .setValue('administrator')
                                .setDefault(perms.includes("administrator") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les salons")
                                .setValue('managechannel')
                                .setDefault(perms.includes("managechannel") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer le serveur")
                                .setValue('manageguild')
                                .setDefault(perms.includes("manageguild") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Voir les logs du serveur ")
                                .setValue('viewlogsserver')
                                .setDefault(perms.includes("viewlogsserver") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les messages ")
                                .setValue('managemsg')
                                .setDefault(perms.includes("managemsg") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                                .setValue('pingeveryone')
                                .setDefault(perms.includes("pingeveryone") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Rendre les membres muets")
                                .setValue('muutemember')
                                .setDefault(perms.includes("muutemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mettre en sourdine des membres ")
                                .setValue('sourdinemember')
                                .setDefault(perms.includes("sourdinemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Déplacer des membres")
                                .setValue('moovemember')
                                .setDefault(perms.includes("moovemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Changer le pseudo")
                                .setValue('changenick')
                                .setDefault(perms.includes("changenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les pseudos")
                                .setValue('managenick')
                                .setDefault(perms.includes("managenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les rôles ")
                                .setValue('managerole')
                                .setDefault(perms.includes("managerole") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les webhooks")
                                .setValue('managewebhook')
                                .setDefault(perms.includes("managewebhook") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les émojis et les autocollants ")
                                .setValue('manageemoji')
                                .setDefault(perms.includes("manageemoji") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les évènements")
                                .setValue('manageevent')
                                .setDefault(perms.includes("manageevent") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les fils")
                                .setValue('managethread')
                                .setDefault(perms.includes("managethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des autocollants externes ")
                                .setValue('usesticker')
                                .setDefault(perms.includes("usesticker") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils publics")
                                .setValue('createpublicthread')
                                .setDefault(perms.includes("createpublicthread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des fils privés ")
                                .setValue('useprivatethread')
                                .setDefault(perms.includes("useprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils privés")
                                .setValue('createprivatethread')
                                .setDefault(perms.includes("createprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Exclure temporairement")
                                .setValue('kicktime')
                                .setDefault(perms.includes("kicktime") ? true : false),

                            )
                            await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const roleNb = req.length
                        bot.db.query(`SELECT * FROM removeroleauser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = removeroleEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], roleNb, permsNb)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantremoverole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantremoverole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnremoverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                })
                    })
                } else if(interaction.customId == "previousindependant") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnAntiBot")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "addindependantremoverole") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnremoverole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistremoverole')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistremoverole") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM removeroleauser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO removeroleauser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateremoverole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM removeroleperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const permsNb = req.length
                            const select4 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select4removerole')
                            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
                            .setMaxValues(23)
.setMinValues(0)                                

                            const perms = req.map(row => row.perm);
                            
                            select4.addOptions(
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Expulser des membres.")
                                .setValue('expulsemember')
                                .setDefault(perms.includes("expulsemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Bannir des membres")
                                .setValue('banmember')
                                .setDefault(perms.includes("banmember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Administrateur")
                                .setValue('administrator')
                                .setDefault(perms.includes("administrator") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les salons")
                                .setValue('managechannel')
                                .setDefault(perms.includes("managechannel") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer le serveur")
                                .setValue('manageguild')
                                .setDefault(perms.includes("manageguild") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Voir les logs du serveur ")
                                .setValue('viewlogsserver')
                                .setDefault(perms.includes("viewlogsserver") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les messages ")
                                .setValue('managemsg')
                                .setDefault(perms.includes("managemsg") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                                .setValue('pingeveryone')
                                .setDefault(perms.includes("pingeveryone") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Rendre les membres muets")
                                .setValue('muutemember')
                                .setDefault(perms.includes("muutemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Mettre en sourdine des membres ")
                                .setValue('sourdinemember')
                                .setDefault(perms.includes("sourdinemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Déplacer des membres")
                                .setValue('moovemember')
                                .setDefault(perms.includes("moovemember") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Changer le pseudo")
                                .setValue('changenick')
                                .setDefault(perms.includes("changenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les pseudos")
                                .setValue('managenick')
                                .setDefault(perms.includes("managenick") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les rôles ")
                                .setValue('managerole')
                                .setDefault(perms.includes("managerole") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les webhooks")
                                .setValue('managewebhook')
                                .setDefault(perms.includes("managewebhook") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les émojis et les autocollants ")
                                .setValue('manageemoji')
                                .setDefault(perms.includes("manageemoji") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les évènements")
                                .setValue('manageevent')
                                .setDefault(perms.includes("manageevent") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Gérer les fils")
                                .setValue('managethread')
                                .setDefault(perms.includes("managethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des autocollants externes ")
                                .setValue('usesticker')
                                .setDefault(perms.includes("usesticker") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils publics")
                                .setValue('createpublicthread')
                                .setDefault(perms.includes("createpublicthread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Utiliser des fils privés ")
                                .setValue('useprivatethread')
                                .setDefault(perms.includes("useprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Créer des fils privés")
                                .setValue('createprivatethread')
                                .setDefault(perms.includes("createprivatethread") ? true : false),
                                new Discord.StringSelectMenuOptionBuilder()
                                .setLabel("Exclure temporairement")
                                .setValue('kicktime')
                                .setDefault(perms.includes("kicktime") ? true : false),

                            )
                            await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const roleNb = req.length
                        bot.db.query(`SELECT * FROM removeroleauser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantremoverole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantremoverole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnremoverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                    })
                })
                } else if(interaction.customId == "removeindependantremoverole") {
                    interaction.deferUpdate()
                    button7 = new Discord.ButtonBuilder()
                    .setCustomId("deleteallremoverole")
                    .setEmoji(`<:poubelle:1228059993274580992>`)
                    .setStyle(Discord.ButtonStyle.Primary)
                    button8 = new Discord.ButtonBuilder()
                    .setCustomId("previousowner2")
                    .setEmoji(`<:better_previous:1148608585463496824> `)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    button9 = new Discord.ButtonBuilder()
                    .setCustomId("afterowner2")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setEmoji(`<:better_after:1148608588454051840>`)
    
                    if(req.length < 10) button9.setDisabled(true)
                    let menuSelect, aa
                    const menuOption = []; 
    
                    bot.db.query(`SELECT * FROM removeroleauser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    for (let i = 0; i < req.length; i++) {
                        const option = req[i];
    
                        const user = message.guild.members.cache.get(option.userId)
                        if(user) {
                            menuOption.push({ 
                                name: `${user.user.username} (ID: ${option.userId})`, 
                                value: option.userId
                            }); 
                        } else {
                        menuOption.push({ 
                            name: `Introuvable (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                        }
                    }
    
    
                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistremoverole')
                    .setMaxValues(req.length)
                    .setMinValues(1)
                    
                    menuOption.forEach(opt => {
                    aa = new Discord.StringSelectMenuOptionBuilder()
                            .setLabel(opt.name)
                            .setValue(opt.value)
                        menuSelect.addOptions(aa);
                    });
                    
                    
                    rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                    msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                    })
                } else if(interaction.customId == "deleteallremoverole") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM removeroleauser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateremoverole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM removeroleauser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantremoverole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantremoverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantremoverole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnremoverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "afterindependantremoverole") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantirole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "inclusremoverole") {
                    let selectremove, aa
                    const menuOption = []; 
                    const roleselect = new Discord.RoleSelectMenuBuilder()
                    .setMaxValues(25)
                    .setCustomId("removeroleselectmenu")
                    .setPlaceholder(`Choisis les rôles que tu souhaite inclure. (${message.guild.roles.cache.size})`)
                    await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        if(req.length < 1) {
                            selectremove = new Discord.StringSelectMenuBuilder().setCustomId("removeroleseletremoverole").setPlaceholder(`Choisis les rôles que tu souhaites pas inclure. (${req.length})`).setDisabled(true).addOptions(new Discord.StringSelectMenuOptionBuilder().setLabel("a").setValue("a"))
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnremoverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)

                            const rows = new Discord.ActionRowBuilder().addComponents(roleselect)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(selectremove)
                            const rows3 = new Discord.ActionRowBuilder().addComponents(button6)

                            interaction.update({ components: [rows, rows2, rows3]})

                        } else {
                            for (let i = 0; i < req.length; i++) {
                                const option = req[i];
            
                                const role = message.guild.roles.cache.get(option.roleId)
                                if(role) {
                                    menuOption.push({ 
                                        name: `${role.name} (ID: ${option.roleId})`, 
                                        value: option.roleId
                                    }); 
                                } else {
                                menuOption.push({ 
                                    name: `Introuvable (ID: ${option.roleId})`, 
                                    value: option.roleId
                                }); 
                                }
                            }

                            selectremove = new Discord.StringSelectMenuBuilder()
                            .setCustomId('rolesremoveroleREMOVE')
                            .setMaxValues(req.length)
                            .setMinValues(1)
                            .setMaxValues(menuOption.length)

                            menuOption.forEach(opt => {
                                aa = new Discord.StringSelectMenuOptionBuilder()
                                        .setLabel(opt.name)
                                        .setValue(opt.value)
                                        selectremove.addOptions(aa);
                              });

                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnremoverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)

                            const rows = new Discord.ActionRowBuilder().addComponents(roleselect)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(selectremove)
                            const rows3 = new Discord.ActionRowBuilder().addComponents(button6)

                            interaction.update({ components: [rows, rows2, rows3]})

                        }
                        
                    })

                } else if(interaction.customId == "removeroleselectmenu") {
                    await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        interaction.values.forEach(async m => {
                            await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}" AND roleId = "${interaction.values}"`, async (err, req) => {
                                if(req.length < 1) bot.db.query(`INSERT INTO removerolerole (guildId, roleId) VALUES (${message.guild.id}, ${m})`)
                            })
                        })
                        updateremoverole(bot, message, interaction)
                    })
                } else if(interaction.customId == "rolesremoveroleREMOVE") {
                    await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                        interaction.values.forEach(async m => {
                            await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}" AND roleId = "${interaction.values}"`, async (err, req) => {
                                bot.db.query(`DELETE FROM removerolerole WHERE roleId = ${m} AND guildId = "${message.guild.id}"`);
                            })
                        })
                        await wait(500)
                        updateremoverole(bot, message, interaction)
                    })
                } else if(interaction.customId == "optionslistremoverole") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM removeroleauser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    updateremoverole(bot, message, interaction)
                } else if(interaction.customId == "select2removerole") {
                    await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("removerole", "")
                        await bot.db.query(`UPDATE removerole SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateremoverole(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "timeout" || interaction.customId == "beforetimeout" || interaction.customId == "returntimeout") {
                    updatetimeout(bot, message, interaction)
                } else if(interaction.customId == "aftertimeout") {
                    await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    statetimeout = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaulttimeout")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2timeout')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expultimeout')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('bannitimeout')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroletimeout')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucuntimeout')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                
                    const a = new Discord.ButtonBuilder()
                    .setLabel("Permission")
                    .setCustomId("timeoutperms")
                    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const b = new Discord.ButtonBuilder()
                    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                    .setCustomId("timeoutactivate")
                    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const c = new Discord.ButtonBuilder()
                    .setLabel("Logs")
                    .setCustomId("timeoutlogs")
                    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("timeoutlogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependanttimeout")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("aftertimeout")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("intervalletimeout")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setLabel("Intervalle")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("maxtimeout")
                    .setEmoji("<:__:1229876600590438452>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Maximum")
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforetimeout")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3timeout')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    row3.addComponents(h, i)
                    
                await interaction.update({ embeds: [antitimeout(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
                    
                    })
                } else if(interaction.customId == "timeoutactivate") {
                    await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE timeout SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatetimeout(bot, message, interaction)
                    })
                } else if(interaction.customId == "timeoutperms") {
                    await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE timeout SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatetimeout(bot, message, interaction)
                    })
                } else if(interaction.customId == "timeoutlogs") {
                    await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE timeout SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatetimeout(bot, message, interaction)
                    })
                } else if(interaction.customId == "timeoutlogsChannelLogs") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE timeout SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatetimeout(bot, message, null, msg)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE timeout SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatetimeout(bot, message, null, msg)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                    })
                } else if(interaction.customId == "select3timeout") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE timeout SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatetimeout(bot, message, interaction)
                    })
                } else if(interaction.customId == "utilisateurIndependanttimeout") {
                    bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statetimeout = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM timeoutlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antitimeout(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antitimeout(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependanttimeout")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependanttimeout")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returntimeout")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "previousindependanttimeout") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returntimeout")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returntimeout")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependanttimeout") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returntimeout")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlisttimeout')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlisttimeout") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statetimeout = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM timeoutlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antitimeout(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antitimeout(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependanttimeout")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependanttimeout")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returntimeout")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependanttimeout") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deletealltimeout")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM timeoutlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslisttimeout')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "deletealltimeout") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statetimeout = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM timeoutlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antitimeout(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antitimeout(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependanttimeout")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependanttimeout")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returntimeout")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "optionslisttimeout") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM timeoutlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)

                    bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statetimeout = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM timeoutlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antitimeout(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antitimeout(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependanttimeout")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependanttimeout")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependanttimeout")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returntimeout")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "intervalletimeout") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE timeout SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatetimeout(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "maxtimeout") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre d'action \`maximal\` que l'utilisateur peut éxécuter, écrit \`cancel\` pour \`annuler.\``)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE timeout SET maximum = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatetimeout(bot, message, null, msg)
                            }
                        }

                    })
                } else if(interaction.customId == "select2timeout") {
                    await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("timeout", "")
                        await bot.db.query(`UPDATE timeout SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updatetimeout(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "expuluser" || interaction.customId == "beforeexpuluser" || interaction.customId == "returnexpuluser") {
                    updateexpuluser(bot, message, interaction)
                } else if(interaction.customId == "afterexpuluser") {
                    await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    stateexpuluser = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultexpuluser")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2expuluser')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expulexpuluser')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('banniexpuluser')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroleexpuluser')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucunexpuluser')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                
                    const a = new Discord.ButtonBuilder()
                    .setLabel("Permission")
                    .setCustomId("expuluserperms")
                    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const b = new Discord.ButtonBuilder()
                    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                    .setCustomId("expuluseractivate")
                    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const c = new Discord.ButtonBuilder()
                    .setLabel("Logs")
                    .setCustomId("expuluserlogs")
                    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("expuluserlogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantexpuluser")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("afterexpuluser")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("intervalleexpuluser")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setLabel("Intervalle")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("maxexpuluser")
                    .setEmoji("<:__:1229876600590438452>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Maximum")
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforeexpuluser")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3expuluser')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    row3.addComponents(h, i)
                    
                await interaction.update({ embeds: [antiexpuluser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
                    
                    })
                } else if(interaction.customId == "expuluseractivate") {
                    await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE expuluser SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateexpuluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "expuluserperms") {
                    await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE expuluser SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateexpuluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "expuluserlogs") {
                    await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE expuluser SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateexpuluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "expuluserlogsChannelLogs") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE expuluser SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updateexpuluser(bot, message, null, msg)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE expuluser SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updateexpuluser(bot, message, null, msg)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                    })
                } else if(interaction.customId == "select3expuluser") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE expuluser SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateexpuluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "utilisateurIndependantexpuluser") {
                    bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateexpuluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM expuluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantexpuluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantexpuluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnexpuluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "previousindependantexpuluser") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnexpuluser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnexpuluser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantexpuluser") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnexpuluser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistexpuluser')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistexpuluser") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateexpuluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM expuluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantexpuluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantexpuluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnexpuluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantexpuluser") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallexpuluser")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM expuluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistexpuluser')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "deleteallexpuluser") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateexpuluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM expuluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantexpuluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantexpuluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnexpuluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "optionslistexpuluser") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM expuluserlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)

                    bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateexpuluser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM expuluserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antiexpuluser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantexpuluser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantexpuluser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantexpuluser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnexpuluser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "intervalleexpuluser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE expuluser SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateexpuluser(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "maxexpuluser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre d'action \`maximal\` que l'utilisateur peut éxécuter, écrit \`cancel\` pour \`annuler.\``)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE expuluser SET maximum = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateexpuluser(bot, message, null, msg)
                            }
                        }

                    })
                } else if(interaction.customId == "select2expuluser") {
                    await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("expuluser", "")
                        await bot.db.query(`UPDATE expuluser SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateexpuluser(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "antilink" || interaction.customId == "beforeantilink" || interaction.customId == "returnantilink") {
                    updateantilink(bot, message, interaction)
                } else if(interaction.customId == "antilinkactivate") {
                    await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antilink SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateantilink(bot, message, interaction)
                            })
                } else if(interaction.customId == "antilinklogs") {
                    await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE antilink SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateantilink(bot, message, interaction)
                        })
                } else if(interaction.customId == "antilinklogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antilink SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updateantilink(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antilink SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updateantilink(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })
                } else if(interaction.customId == "select3antilink") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antilink SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateantilink(bot, message, interaction)
                    })
                } else if(interaction.customId == "afterantilink") {
                    await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    stateantilink = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                    const duree = req[0].duree
                    const inclus = req[0].inclus
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultantilink")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2antilink')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expulantilink')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('banniantilink')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Exclure temporairement.")
                        .setValue('excluretempoantilink')
                        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroleantilink')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucunantilink')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );

                    const select4 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select4antilink')
                    .setPlaceholder("Choisis ce que doit contenir l'action.")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Contenant une image.`)
                    .setValue('image')
                    .setDefault(req[0].inclus == "image" || req[0].inclus == "imagediscord" || req[0].inclus == "imagelien" || req[0].inclus == "imagediscordlien"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Contenant une invitation discord.`)
                    .setValue('discord')
                    .setDefault(req[0].inclus == "discord" || req[0].inclus == "imagediscord"|| req[0].inclus == "imagediscordlien" || req[0].inclus == "liendiscord"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Contenant un lien en général.`)
                    .setValue('link')
                    .setDefault(req[0].inclus == "lien" || req[0].inclus == "imagelien" || req[0].inclus == "liendiscord" || req[0].inclus == "imagediscordlien"));

                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("antilinklogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantantilink")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("ignorerantilink")
                    .setEmoji("<:folder:1229004211614646342>")
                    .setLabel("Ignorer")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforeantilink")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const j = new Discord.ButtonBuilder()
                    .setCustomId("dureeantilink")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Durée")
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3antilink')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    const row5 = new Discord.ActionRowBuilder().addComponents(select4)
                    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e
    
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    if(punition == "excluretempo") row3.addComponents(j)
                    row3.addComponents(i)
                    await bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await interaction.update({ embeds: [antilinkEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, inclus)], components: [row, row2, row5, row4, row3] })
                    
                    })
                })
                } else if(interaction.customId == "utilisateurIndependantantilink") {
                    bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateantilink = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM antilinklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantilink")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantilink")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantilink")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "previousindependantantilink") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantilink")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantantilink") {
                    if (currentPage < totalPages - 1) {
                        currentPage++;
                        button1.setDisabled(false);
                        button4.setDisabled(currentPage === totalPages - 1);
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const button6 = new Discord.ButtonBuilder()
                        .setCustomId("returnantilink")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
    
                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                        msg.edit({
                            embeds: [embeds[currentPage]],
                            components: [rows, rows2],
                          });
                        }
                } else if(interaction.customId == "addindependantantilink") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantilink")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistantilink')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistantilink") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antilinklistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antilinklistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateantilink = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM antilinklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantilink")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantilink")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantilink")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })                    
                } else if(interaction.customId == "removeindependantantilink") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallantilink")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM antilinklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistantilink')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
            })
                } else if(interaction.customId == "deleteallantilink") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antilinklistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateantilink = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM antilinklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantilink")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantilink")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantilink")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantilink")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "optionslistantilink") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM antilinklistuser WHERE userId = ${id}`);
                    })
          
                  await wait(500)

                  bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    let ok;
            
                    const state = req[0].state
                    stateantilink = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                    const duree = req[0].duree
                    const inclus = req[0].inclus
            
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                    bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const nbchannel = req.length
                    bot.db.query(`SELECT * FROM antilinklistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        embeds = []
                        currentPage = 0
                        totalPages = Math.ceil(req.length / itemsPerPage);
                        if(req.length < 1) {
                            const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                            embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                            totalPages = totalPages + 1
                            embeds.push(embed)
                        } else {
                            for (let i = 0; i < req.length; i += itemsPerPage) {
                                let users = ""
                                for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                const member = bot.users.cache.get(req[j].userId) 
                                    if(member) {
                                        users += `${member.username} (ID: ${req[j].userId})\n`;
                                    }
                                }
                                if(users === "") description = "Aucun."
                                const embed = antilinkEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                embeds.push(embed);
                            }
                        }
    

                        button1 = new Discord.ButtonBuilder()
                        .setCustomId("previousindependantantilink")
                        .setEmoji(`<:better_previous:1148608585463496824> `)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button2 = new Discord.ButtonBuilder()
                        .setCustomId("addindependantantilink")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_add:1148608590110789773>`)
                        button3 = new Discord.ButtonBuilder()
                        .setCustomId("removeindependantantilink")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_remove:1148608592937754725>`)
                        button4 = new Discord.ButtonBuilder()
                        .setCustomId("afterindependantantilink")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_after:1148608588454051840>`)
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageindependantantilink")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button6 = new Discord.ButtonBuilder()
                        .setCustomId("returnantilink")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        
                        if(req.length < 10) button4.setDisabled(true)
                        if(req.length < 1) button3.setDisabled(true)

                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                        msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                    
                })})
            })
                } else if(interaction.customId == "select2antilink") {
                    await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("antilink", "")
                        await bot.db.query(`UPDATE antilink SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateantilink(bot, message, interaction)
                    })
                } else if(interaction.customId == "ignorerantilink") {
                    bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const channelList = new Discord.ChannelSelectMenuBuilder()
                    .setCustomId('channelantilink')
                    .setPlaceholder("Choisis les salons que tu souhaites ignorer")
                    .setMaxValues(25);
                    let menuSelect, aa
                    if(req.length > 0) {
                    const menuOption = []; 

                    for (let i = 0; i < req.length; i++) {
                        const option = req[i];

                        const channel = message.guild.channels.cache.get(option.channelId)
                        if(channel) {
                            menuOption.push({ 
                                name: `${channel.name} (ID: ${option.channelId})`, 
                                value: option.channelId
                            }); 
                        } else {
                        menuOption.push({ 
                            name: `Introuvable (ID: ${option.channelId})`, 
                            value: option.channelId
                        }); 
                        }
                    }


                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistantilink2')
                    .setMaxValues(req.length)
                    .setMinValues(1)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    
                    menuOption.forEach(opt => {
                    aa = new Discord.StringSelectMenuOptionBuilder()
                            .setLabel(opt.name)
                            .setValue(opt.value)
                            .setEmoji("<:hashtag:1230136272530444329>")
                        menuSelect.addOptions(aa);
                    });
                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                } else {
                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistantilink2')
                    .setDisabled(true)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    .addOptions( new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("https://discord.gg/uhq")
                        .setValue("salut")
                        .setEmoji("<:hashtag:1230136272530444329>")
                    )

                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                   
                }
                })

                } else if(interaction.customId == "channelantilink") {
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}" AND channelId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antilinkchannel (guildId, channelId) VALUES ("${message.guild.id}", "${id}")`)
                    })
                    })

                    await wait(500)

                    updateantilink(bot, message, interaction)
                } else if(interaction.customId == "optionslistantilink2") {
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM antilinkchannel WHERE channelId = ${id}`);
                    })
          
                  await wait(500)

                  updateantilink(bot, message, interaction)
                } else if(interaction.customId == "dureeantilink") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel\` pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE antilink SET duree = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateantilink(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "select4antilink") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['discord', 'image', 'link'])) a = "imagediscordlien"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['discord', 'image'])) a = "imagediscord" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['discord'])) a = "discord"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['image'])) a = "image"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['link'])) a = "lien"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['image', 'link'])) a = "imagelien"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['discord', 'link'])) a = "liendiscord"
                    await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE antilink SET inclus = "${a}" WHERE guildId = ${message.guild.id}`);
                    updateantilink(bot, message, interaction)
                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "toxicite" || interaction.customId == "beforetoxicite" || interaction.customId == "returntoxicite") {
                    updatetoxicite(bot, message, interaction)
                } else if(interaction.customId == "toxiciteactivate") {
                    await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE toxicite SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatetoxicite(bot, message, interaction)
                            })
                } else if(interaction.customId == "toxicitelogs") {
                    await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE toxicite SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatetoxicite(bot, message, interaction)
                        })
                } else if(interaction.customId == "toxicitelogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE toxicite SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updatetoxicite(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE toxicite SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updatetoxicite(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })
                } else if(interaction.customId == "select3toxicite") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE toxicite SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatetoxicite(bot, message, interaction)
                    })
                } else if(interaction.customId == "aftertoxicite") {
                    await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    statetoxicite = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                    const duree = req[0].duree
                    const pourcentage = req[0].pourcentage
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaulttoxicite")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2toxicite')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expultoxicite')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('bannitoxicite')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Exclure temporairement.")
                        .setValue('excluretempotoxicite')
                        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroletoxicite')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucuntoxicite')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );


                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("toxicitelogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependanttoxicite")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("ignorertoxicite")
                    .setEmoji("<:folder:1229004211614646342>")
                    .setLabel("Ignorer")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforetoxicite")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const j = new Discord.ButtonBuilder()
                    .setCustomId("dureetoxicite")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Durée")
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("pourcentagetoxicite")
                    .setEmoji("<:pourcentage:1230815464062713927>")
                    .setLabel("Pourcentage")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3toxicite')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e
    
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(h)
                    row3.addComponents(g)
                    if(punition == "excluretempo") row3.addComponents(j)
                    row3.addComponents(i)
                    await bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await interaction.update({ embeds: [toxiciteEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, pourcentage)], components: [row, row2, row4, row3] })
                    
                    })
                })
                } else if(interaction.customId == "utilisateurIndependanttoxicite") {
                    bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statetoxicite = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const pourcentage = req[0].pourcentage
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM toxicitelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependanttoxicite")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependanttoxicite")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returntoxicite")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "previousindependanttoxicite") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returntoxicite")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependanttoxicite") {
                    if (currentPage < totalPages - 1) {
                        currentPage++;
                        button1.setDisabled(false);
                        button4.setDisabled(currentPage === totalPages - 1);
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const button6 = new Discord.ButtonBuilder()
                        .setCustomId("returntoxicite")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
    
                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                        msg.edit({
                            embeds: [embeds[currentPage]],
                            components: [rows, rows2],
                          });
                        }
                } else if(interaction.customId == "addindependanttoxicite") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returntoxicite")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlisttoxicite')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlisttoxicite") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM toxicitelistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO toxicitelistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statetoxicite = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const pourcentage = req[0].pourcentage
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM toxicitelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependanttoxicite")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependanttoxicite")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returntoxicite")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })                    
                } else if(interaction.customId == "removeindependanttoxicite") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deletealltoxicite")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM toxicitelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslisttoxicite')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
            })
                } else if(interaction.customId == "deletealltoxicite") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM toxicitelistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statetoxicite = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const pourcentage = req[0].pourcentage
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM toxicitelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependanttoxicite")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependanttoxicite")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependanttoxicite")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returntoxicite")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "optionslisttoxicite") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM toxicitelistuser WHERE userId = ${id}`);
                    })
          
                  await wait(500)

                  bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    let ok;
            
                    const state = req[0].state
                    statetoxicite = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                    const duree = req[0].duree
                    const pourcentage = req[0].pourcentage
            
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                    bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const nbchannel = req.length
                    bot.db.query(`SELECT * FROM toxicitelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        embeds = []
                        currentPage = 0
                        totalPages = Math.ceil(req.length / itemsPerPage);
                        if(req.length < 1) {
                            const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                            embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                            totalPages = totalPages + 1
                            embeds.push(embed)
                        } else {
                            for (let i = 0; i < req.length; i += itemsPerPage) {
                                let users = ""
                                for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                const member = bot.users.cache.get(req[j].userId) 
                                    if(member) {
                                        users += `${member.username} (ID: ${req[j].userId})\n`;
                                    }
                                }
                                if(users === "") description = "Aucun."
                                const embed = toxiciteEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, pourcentage)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                embeds.push(embed);
                            }
                        }
    

                        button1 = new Discord.ButtonBuilder()
                        .setCustomId("previousindependanttoxicite")
                        .setEmoji(`<:better_previous:1148608585463496824> `)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button2 = new Discord.ButtonBuilder()
                        .setCustomId("addindependanttoxicite")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_add:1148608590110789773>`)
                        button3 = new Discord.ButtonBuilder()
                        .setCustomId("removeindependanttoxicite")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_remove:1148608592937754725>`)
                        button4 = new Discord.ButtonBuilder()
                        .setCustomId("afterindependanttoxicite")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_after:1148608588454051840>`)
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageindependanttoxicite")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button6 = new Discord.ButtonBuilder()
                        .setCustomId("returntoxicite")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        
                        if(req.length < 10) button4.setDisabled(true)
                        if(req.length < 1) button3.setDisabled(true)

                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                        msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                    
                })})
            })
                } else if(interaction.customId == "select2toxicite") {
                    await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("toxicite", "")
                        await bot.db.query(`UPDATE toxicite SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updatetoxicite(bot, message, interaction)
                    })
                } else if(interaction.customId == "ignorertoxicite") {
                    bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const channelList = new Discord.ChannelSelectMenuBuilder()
                    .setCustomId('channeltoxicite')
                    .setPlaceholder("Choisis les salons que tu souhaites ignorer")
                    .setMaxValues(25);
                    let menuSelect, aa
                    if(req.length > 0) {
                    const menuOption = []; 

                    for (let i = 0; i < req.length; i++) {
                        const option = req[i];

                        const channel = message.guild.channels.cache.get(option.channelId)
                        if(channel) {
                            menuOption.push({ 
                                name: `${channel.name} (ID: ${option.channelId})`, 
                                value: option.channelId
                            }); 
                        } else {
                        menuOption.push({ 
                            name: `Introuvable (ID: ${option.channelId})`, 
                            value: option.channelId
                        }); 
                        }
                    }


                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslisttoxicite2')
                    .setMaxValues(req.length)
                    .setMinValues(1)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    
                    menuOption.forEach(opt => {
                    aa = new Discord.StringSelectMenuOptionBuilder()
                            .setLabel(opt.name)
                            .setValue(opt.value)
                            .setEmoji("<:hashtag:1230136272530444329>")
                        menuSelect.addOptions(aa);
                    });
                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                } else {
                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslisttoxicite2')
                    .setDisabled(true)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    .addOptions( new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("https://discord.gg/uhq")
                        .setValue("salut")
                        .setEmoji("<:hashtag:1230136272530444329>")
                    )

                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                   
                }
                })

                } else if(interaction.customId == "channeltoxicite") {
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}" AND channelId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO toxicitechannel (guildId, channelId) VALUES ("${message.guild.id}", "${id}")`)
                    })
                    })

                    await wait(500)

                    updatetoxicite(bot, message, interaction)
                } else if(interaction.customId == "optionslisttoxicite2") {
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM toxicitechannel WHERE channelId = ${id}`);
                    })
          
                  await wait(500)

                  updatetoxicite(bot, message, interaction)
                } else if(interaction.customId == "dureetoxicite") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel\` pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE toxicite SET duree = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatetoxicite(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "pourcentagetoxicite") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le pourcentage \`maximal\` de l'action, écrit \`cancel\` pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed.setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            if(Number(collected.first().content) < 1 || Number(collected.first().content) > 100) return message.channel.send({ embeds: [embed.setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre entre **1** et **100**`)]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE toxicite SET pourcentage = "${collected.first().content}%" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié pourcentage maximal de l'action pour **${collected.first().content}%**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatetoxicite(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "select2updaterole") {
                    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("updaterole", "")
                    await bot.db.query(`UPDATE updaterole SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updateupdaterole(bot, message, interaction)
                    })
                } else if(interaction.customId == "updateroleactivate") {
                    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE updaterole SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateupdaterole(bot, message, interaction)
                        })
                } else if(interaction.customId == "updateroleperms") {
                    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE updaterole SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateupdaterole(bot, message, interaction)
                            })
                }else if(interaction.customId == "updaterolelogs") {
                    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE updaterole SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateupdaterole(bot, message, interaction)
                            })
                } else if(interaction.customId == "updaterolelogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE updaterole SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updateupdaterole(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE updaterole SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updateupdaterole(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })} else if(interaction.customId == "select3updaterole") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE updaterole SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateupdaterole(bot, message, interaction)
                            })
                } else if(interaction.customId == "afterupdaterole") {
                    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultupdaterole")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2updaterole')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulupdaterole')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniupdaterole')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleupdaterole')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunupdaterole')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("updaterolelogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantupdaterole")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforeupdaterole")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3updaterole')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                        
                        await interaction.update({ embeds: [updateroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
                            })
                } else if(interaction.customId == "beforeupdaterole") {
                    updateupdaterole(bot, message, interaction)
                } else if(interaction.customId == "utilisateurIndependantupdaterole") {
                    bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updaterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "returnupdaterole" || interaction.customId == "select" && interaction.values[0] == "updaterole") {
                    updateupdaterole(bot, message, interaction)
                } else if(interaction.customId == "previousindependantupdaterole") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdaterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantupdaterole") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdaterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantupdaterole") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdaterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistupdaterole')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                    
                } else if(interaction.customId == "userlistupdaterole") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM updaterolelistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO updaterolelistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateupdaterole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updaterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantupdaterole") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallupdaterole")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM updaterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistupdaterole')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                  } else if(interaction.customId == "optionslistupdaterole") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM updaterolelistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateupdaterole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updaterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "deleteallupdaterole") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM updaterolelistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateupdaterole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updaterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdaterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdaterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdaterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdaterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "select" && interaction.values[0] == "updatechannel" || interaction.customId == "beforeupdatechannel" || interaction.customId == "returnupdatechannel") {
                    updateupdatechannel(bot, message, interaction)
                } else if(interaction.customId == "updatechannelactivate") {
                    await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE updatechannel SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateupdatechannel(bot, message, interaction)
                            })
                } else if(interaction.customId == "updatechannellogs") {
                    await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE updatechannel SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateupdatechannel(bot, message, interaction)
                        })
                } else if(interaction.customId == "updatechannellogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE updatechannel SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updateupdatechannel(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE updatechannel SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                            updateupdatechannel(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })
                } else if(interaction.customId == "select3updatechannel") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE updatechannel SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateupdatechannel(bot, message, interaction)
                    })
                } else if(interaction.customId == "afterupdatechannel") {
                    await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    stateupdatechannel = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultupdatechannel")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2updatechannel')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expulupdatechannel')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('banniupdatechannel')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Exclure temporairement.")
                        .setValue('excluretempoupdatechannel')
                        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprroleupdatechannel')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucunupdatechannel')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("updatechannellogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantupdatechannel")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("ignorerupdatechannel")
                    .setEmoji("<:folder:1229004211614646342>")
                    .setLabel("Ignorer")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforeupdatechannel")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const j = new Discord.ButtonBuilder()
                    .setCustomId("dureeupdatechannel")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Durée")
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3updatechannel')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e
    
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    if(punition == "excluretempo") row3.addComponents(j)
                    row3.addComponents(i)
                    await bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await interaction.update({ embeds: [updatechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length)], components: [row, row2, row4, row3] })
                    
                    })
                })
                } else if(interaction.customId == "utilisateurIndependantupdatechannel") {
                    bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateupdatechannel = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM updatechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdatechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdatechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdatechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "previousindependantupdatechannel") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdatechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantupdatechannel") {
                    if (currentPage < totalPages - 1) {
                        currentPage++;
                        button1.setDisabled(false);
                        button4.setDisabled(currentPage === totalPages - 1);
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const button6 = new Discord.ButtonBuilder()
                        .setCustomId("returnupdatechannel")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
    
                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                        msg.edit({
                            embeds: [embeds[currentPage]],
                            components: [rows, rows2],
                          });
                        }
                } else if(interaction.customId == "addindependantupdatechannel") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdatechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistupdatechannel')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistupdatechannel") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM updatechannellistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO updatechannellistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateupdatechannel = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM updatechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel, punition == "excluretempo" ? duree : null, inclus)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdatechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdatechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdatechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })                    
                } else if(interaction.customId == "removeindependantupdatechannel") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallupdatechannel")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM updatechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistupdatechannel')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
            })
                } else if(interaction.customId == "deleteallupdatechannel") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM updatechannellistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateupdatechannel = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const nbchannel = req.length
                        bot.db.query(`SELECT * FROM updatechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdatechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdatechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdatechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdatechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })})
                })
                } else if(interaction.customId == "optionslistupdatechannel") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM updatechannellistuser WHERE userId = ${id}`);
                    })
          
                  await wait(500)

                  bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    let ok;
            
                    const state = req[0].state
                    stateupdatechannel = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
            
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                    bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const nbchannel = req.length
                    bot.db.query(`SELECT * FROM updatechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        embeds = []
                        currentPage = 0
                        totalPages = Math.ceil(req.length / itemsPerPage);
                        if(req.length < 1) {
                            const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], nbchannel)
                            embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                            totalPages = totalPages + 1
                            embeds.push(embed)
                        } else {
                            for (let i = 0; i < req.length; i += itemsPerPage) {
                                let users = ""
                                for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                const member = bot.users.cache.get(req[j].userId) 
                                    if(member) {
                                        users += `${member.username} (ID: ${req[j].userId})\n`;
                                    }
                                }
                                if(users === "") description = "Aucun."
                                const embed = updatechannelEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], nbchannel)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                embeds.push(embed);
                            }
                        }
    

                        button1 = new Discord.ButtonBuilder()
                        .setCustomId("previousindependantupdatechannel")
                        .setEmoji(`<:better_previous:1148608585463496824> `)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button2 = new Discord.ButtonBuilder()
                        .setCustomId("addindependantupdatechannel")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_add:1148608590110789773>`)
                        button3 = new Discord.ButtonBuilder()
                        .setCustomId("removeindependantupdatechannel")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_remove:1148608592937754725>`)
                        button4 = new Discord.ButtonBuilder()
                        .setCustomId("afterindependantupdatechannel")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setEmoji(`<:better_after:1148608588454051840>`)
                        button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageindependantupdatechannel")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        button6 = new Discord.ButtonBuilder()
                        .setCustomId("returnupdatechannel")
                        .setEmoji(`<:better_no:1147096824440705024>`)
                        .setStyle(Discord.ButtonStyle.Secondary)
                        
                        if(req.length < 10) button4.setDisabled(true)
                        if(req.length < 1) button3.setDisabled(true)

                        const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                        const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                        msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                    
                })})
            })
                } else if(interaction.customId == "select2updatechannel") {
                    await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        const action = interaction.values[0].replace("updatechannel", "")
                        await bot.db.query(`UPDATE updatechannel SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                        updateupdatechannel(bot, message, interaction)
                    })
                } else if(interaction.customId == "ignorerupdatechannel") {
                    bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const channelList = new Discord.ChannelSelectMenuBuilder()
                    .setCustomId('channelupdatechannel')
                    .setPlaceholder("Choisis les salons que tu souhaites ignorer")
                    .setMaxValues(25);
                    let menuSelect, aa
                    if(req.length > 0) {
                    const menuOption = []; 

                    for (let i = 0; i < req.length; i++) {
                        const option = req[i];

                        const channel = message.guild.channels.cache.get(option.channelId)
                        if(channel) {
                            menuOption.push({ 
                                name: `${channel.name} (ID: ${option.channelId})`, 
                                value: option.channelId
                            }); 
                        } else {
                        menuOption.push({ 
                            name: `Introuvable (ID: ${option.channelId})`, 
                            value: option.channelId
                        }); 
                        }
                    }


                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistupdatechannel2')
                    .setMaxValues(req.length)
                    .setMinValues(1)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    
                    menuOption.forEach(opt => {
                    aa = new Discord.StringSelectMenuOptionBuilder()
                            .setLabel(opt.name)
                            .setValue(opt.value)
                            .setEmoji("<:hashtag:1230136272530444329>")
                        menuSelect.addOptions(aa);
                    });
                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                } else {
                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistupdatechannel2')
                    .setDisabled(true)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    .addOptions( new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("https://discord.gg/uhq")
                        .setValue("salut")
                        .setEmoji("<:hashtag:1230136272530444329>")
                    )

                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                   
                }
                })

                } else if(interaction.customId == "channelupdatechannel") {
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}" AND channelId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO updatechannelchannel (guildId, channelId) VALUES ("${message.guild.id}", "${id}")`)
                    })
                    })

                    await wait(500)

                    updateupdatechannel(bot, message, interaction)
                } else if(interaction.customId == "optionslistupdatechannel2") {
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM updatechannelchannel WHERE channelId = ${id}`);
                    })
          
                  await wait(500)

                  updateupdatechannel(bot, message, interaction)
                } else if(interaction.customId == "select2updateguild") {
                    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("updateguild", "")
                    await bot.db.query(`UPDATE updateguild SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updateupdateguild(bot, message, interaction)
                    })
                } else if(interaction.customId == "updateguildactivate") {
                    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE updateguild SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateupdateguild(bot, message, interaction)
                        })
                } else if(interaction.customId == "updateguildperms") {
                    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE updateguild SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateupdateguild(bot, message, interaction)
                            })
                }else if(interaction.customId == "updateguildlogs") {
                    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE updateguild SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateupdateguild(bot, message, interaction)
                            })
                } else if(interaction.customId == "updateguildlogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE updateguild SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updateupdateguild(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE updateguild SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updateupdateguild(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })} else if(interaction.customId == "select3updateguild") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE updateguild SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateupdateguild(bot, message, interaction)
                            })
                } else if(interaction.customId == "afterupdateguild") {
                    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultupdateguild")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2updateguild')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulupdateguild')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniupdateguild')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleupdateguild')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunupdateguild')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("updateguildlogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantupdateguild")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforeupdateguild")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3updateguild')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                        
                        await interaction.update({ embeds: [updateguildEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
                            })
                } else if(interaction.customId == "beforeupdateguild") {
                    updateupdateguild(bot, message, interaction)
                } else if(interaction.customId == "utilisateurIndependantupdateguild") {
                    bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updateguildlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdateguild")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdateguild")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdateguild")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "returnupdateguild" || interaction.customId == "select" && interaction.values[0] == "updateguild") {
                    updateupdateguild(bot, message, interaction)
                } else if(interaction.customId == "previousindependantupdateguild") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdateguild")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantupdateguild") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdateguild")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantupdateguild") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnupdateguild")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistupdateguild')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                    
                } else if(interaction.customId == "userlistupdateguild") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM updateguildlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO updateguildlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateupdateguild = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updateguildlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdateguild")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdateguild")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdateguild")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantupdateguild") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallupdateguild")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM updateguildlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistupdateguild')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                  } else if(interaction.customId == "optionslistupdateguild") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM updateguildlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateupdateguild = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updateguildlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdateguild")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdateguild")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdateguild")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "deleteallupdateguild") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM updateguildlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateupdateguild = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM updateguildlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = updateguildEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantupdateguild")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantupdateguild")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantupdateguild")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnupdateguild")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "select2massiverole") {
                    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("massiverole", "")
                    await bot.db.query(`UPDATE massiverole SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updatemassiverole(bot, message, interaction)
                    })
                } else if(interaction.customId == "massiveroleactivate") {
                    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE massiverole SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatemassiverole(bot, message, interaction)
                        })
                } else if(interaction.customId == "massiveroleperms") {
                    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE massiverole SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatemassiverole(bot, message, interaction)
                            })
                }else if(interaction.customId == "massiverolelogs") {
                    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE massiverole SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatemassiverole(bot, message, interaction)
                            })
                } else if(interaction.customId == "massiverolelogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE massiverole SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updatemassiverole(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE massiverole SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updatemassiverole(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })} else if(interaction.customId == "select3massiverole") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE massiverole SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatemassiverole(bot, message, interaction)
                            })
                } else if(interaction.customId == "aftermassiverole") {
                    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultmassiverole")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2massiverole')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulmassiverole')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('bannimassiverole')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprrolemassiverole')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunmassiverole')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("massiverolelogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantmassiverole")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforemassiverole")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        const h = new Discord.ButtonBuilder()
                        .setCustomId("maassivroleHelp")
                        .setEmoji("<:better_rouage:1147593990921797682>")
                        .setStyle(Discord.ButtonStyle.Danger)
                        .setLabel("Système automatique")
                        let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3massiverole')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                        const row5 = new Discord.ActionRowBuilder().addComponents(h)

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                        
                        await interaction.update({ embeds: [massiveroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3, row5] })
                            })
                } else if(interaction.customId == "beforemassiverole") {
                    updatemassiverole(bot, message, interaction)
                } else if(interaction.customId == "utilisateurIndependantmassiverole") {
                    bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM massiverolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmassiverole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmassiverole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmassiverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "returnmassiverole" || interaction.customId == "select" && interaction.values[0] == "massiverole") {
                    updatemassiverole(bot, message, interaction)
                } else if(interaction.customId == "previousindependantmassiverole") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnmassiverole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantmassiverole") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnmassiverole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantmassiverole") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnmassiverole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistmassiverole')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                    
                } else if(interaction.customId == "userlistmassiverole") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM massiverolelistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO massiverolelistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statemassiverole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM massiverolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmassiverole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmassiverole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmassiverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantmassiverole") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallmassiverole")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM massiverolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistmassiverole')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                  } else if(interaction.customId == "optionslistmassiverole") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM massiverolelistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statemassiverole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM massiverolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmassiverole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmassiverole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmassiverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "deleteallmassiverole") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM massiverolelistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statemassiverole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM massiverolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = massiveroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmassiverole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmassiverole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmassiverole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmassiverole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "maassivroleHelp") {
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")
                    .setDescription(`<:better_rouage:1147593990921797682> Ce module est totalement géré par un algorithme de Better, souvent les modules gérer par des algorithmes ne peuvent pas connaître l'auteur de l'action qui entraîne l'activation de ce module, il peut tout de même donner des suppositions. Si vous activez ce module, Better désactivera les permissions lors d'un raid.\n
                    **__Note__: **Si vous souhaitez réactiver les permissions plus simplement, activer les logs, un bouton en dessous du message d'alerte apparaîtra pour réactiver les permissions. Vous pouvez aussi configurer l'accès à ce bouton dans la configuration (\`/config\`) du robot.\n
                    [Si vous avez des questions sur les systèmes automatisés contactés l'équipe d'assistance.](https://discord.gg/uhq)
                    
                    Ce module n'est pas encore disponible !`)
                  
                  interaction.reply({ embeds: [embed], ephemeral: true})
                } else if(interaction.customId == "select" && interaction.values[0] == "muteuser" || interaction.customId == "beforemuteuser" || interaction.customId == "returnmuteuser") {
                    updatemuteuser(bot, message, interaction)
                } else if(interaction.customId == "aftermuteuser") {
                    await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    statemuteuser = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultmuteuser")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2muteuser')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expulmuteuser')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('bannimuteuser')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprrolemuteuser')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucunmuteuser')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                
                    const a = new Discord.ButtonBuilder()
                    .setLabel("Permission")
                    .setCustomId("muteuserperms")
                    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const b = new Discord.ButtonBuilder()
                    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                    .setCustomId("muteuseractivate")
                    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const c = new Discord.ButtonBuilder()
                    .setLabel("Logs")
                    .setCustomId("muteuserlogs")
                    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("muteuserlogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantmuteuser")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("aftermuteuser")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("intervallemuteuser")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setLabel("Intervalle")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("maxmuteuser")
                    .setEmoji("<:__:1229876600590438452>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Maximum")
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforemuteuser")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3muteuser')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    row3.addComponents(h, i)
                    
                await interaction.update({ embeds: [antimuteuser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
                    
                    })
                } else if(interaction.customId == "muteuseractivate") {
                    await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE muteuser SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatemuteuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "muteuserperms") {
                    await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE muteuser SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatemuteuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "muteuserlogs") {
                    await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE muteuser SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatemuteuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "muteuserlogsChannelLogs") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE muteuser SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatemuteuser(bot, message, null, msg)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE muteuser SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatemuteuser(bot, message, null, msg)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                    })
                } else if(interaction.customId == "select3muteuser") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE muteuser SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatemuteuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "utilisateurIndependantmuteuser") {
                    bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statemuteuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM muteuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmuteuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmuteuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmuteuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "previousindependantmuteuser") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnmuteuser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnmuteuser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantmuteuser") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnmuteuser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistmuteuser')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistmuteuser") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statemuteuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM muteuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmuteuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmuteuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmuteuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantmuteuser") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallmuteuser")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM muteuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistmuteuser')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "deleteallmuteuser") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statemuteuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM muteuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmuteuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmuteuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmuteuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "optionslistmuteuser") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM muteuserlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)

                    bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statemuteuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM muteuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antimuteuser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantmuteuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantmuteuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantmuteuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnmuteuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "intervallemuteuser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE muteuser SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatemuteuser(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "maxmuteuser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre d'action \`maximal\` que l'utilisateur peut éxécuter, écrit \`cancel\` pour \`annuler.\``)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE muteuser SET maximum = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatemuteuser(bot, message, null, msg)
                            }
                        }

                    })
                } else if(interaction.customId == "select" && interaction.values[0] == "sourdineuser" || interaction.customId == "beforesourdineuser" || interaction.customId == "returnsourdineuser") {
                    updatesourdineuser(bot, message, interaction)
                } else if(interaction.customId == "aftersourdineuser") {
                    await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                    const state = req[0].state
                    statesourdineuser = req[0].state
                    const logs = req[0].logs
                    const permission = req[0].permission
                    const punition = req[0].punition
                    const reste = req[0].reste
                
                    if(logs == "on") ok = "✅"
                    else if(logs == "off") ok = "❌"
                    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultsourdineuser")
                
                    const select2 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select2sourdineuser')
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Expulsion.")
                        .setValue('expulsourdineuser')
                        .setDefault(puni[req[0].punition] == "Expulsion."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Bannissement.")
                        .setValue('bannisourdineuser')
                        .setDefault(puni[req[0].punition] == "Bannissement."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Suppression de ces rôles.")
                        .setValue('supprrolesourdineuser')
                        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("Aucune.")
                        .setValue('aucunsourdineuser')
                        .setDefault(puni[req[0].punition] == "Aucune."),
                    );
                
                    const a = new Discord.ButtonBuilder()
                    .setLabel("Permission")
                    .setCustomId("sourdineuserperms")
                    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const b = new Discord.ButtonBuilder()
                    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
                    .setCustomId("sourdineuseractivate")
                    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const c = new Discord.ButtonBuilder()
                    .setLabel("Logs")
                    .setCustomId("sourdineuserlogs")
                    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const d = new Discord.ButtonBuilder()
                    .setLabel("Salon")
                    .setCustomId("sourdineuserlogsChannelLogs")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const e = new Discord.ButtonBuilder()
                    .setLabel("Indépendant")
                    .setCustomId("utilisateurIndependantsourdineuser")
                    .setEmoji("<:paper:1228316546313748542>")
                    .setStyle(Discord.ButtonStyle.Primary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("aftersourdineuser")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("intervallesourdineuser")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setLabel("Intervalle")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const h = new Discord.ButtonBuilder()
                    .setCustomId("maxsourdineuser")
                    .setEmoji("<:__:1229876600590438452>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Maximum")
                    const i = new Discord.ButtonBuilder()
                    .setCustomId("beforesourdineuser")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    let inde = null
                
                    const select3 = new Discord.StringSelectMenuBuilder()
                    .setCustomId('select3sourdineuser')
                    .setPlaceholder("Choisis les utilisateurs autorisés")
                    .setMaxValues(3)
                    .addOptions(
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste des propriétaires.`)
                    .setValue('propriouser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur dans la liste blanche.`)
                    .setValue('blancheuser')
                    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                    new Discord.StringSelectMenuOptionBuilder()
                    .setLabel(`Utilisateur indépendant.`)
                    .setValue('independantuser')
                    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));
                
                
                    const row = new Discord.ActionRowBuilder().addComponents(select);
                    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                    const row3 = new Discord.ActionRowBuilder()
                    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
                    if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                    if(inde !== null && ok !== "❌") row3.addComponents(d)
                    if(inde !== null || ok !== "❌") row3.addComponents(g)
                    row3.addComponents(h, i)
                    
                await interaction.update({ embeds: [antisourdineuser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
                    
                    })
                } else if(interaction.customId == "sourdineuseractivate") {
                    await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE sourdineuser SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatesourdineuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "sourdineuserperms") {
                    await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE sourdineuser SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatesourdineuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "sourdineuserlogs") {
                    await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE sourdineuser SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatesourdineuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "sourdineuserlogsChannelLogs") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE sourdineuser SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatesourdineuser(bot, message, null, msg)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE sourdineuser SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500),updatesourdineuser(bot, message, null, msg)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                    })
                } else if(interaction.customId == "select3sourdineuser") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE sourdineuser SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatesourdineuser(bot, message, interaction)
                    })
                } else if(interaction.customId == "utilisateurIndependantsourdineuser") {
                    bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statesourdineuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM sourdineuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantsourdineuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantsourdineuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnsourdineuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "previousindependantsourdineuser") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnsourdineuser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantAntiBot") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnsourdineuser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantsourdineuser") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnsourdineuser")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistsourdineuser')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                } else if(interaction.customId == "userlistsourdineuser") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antibotlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antibotlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statesourdineuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM sourdineuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantsourdineuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantsourdineuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnsourdineuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantsourdineuser") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallsourdineuser")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM sourdineuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistsourdineuser')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "deleteallsourdineuser") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antibotlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statesourdineuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM sourdineuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantsourdineuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantsourdineuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnsourdineuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "optionslistsourdineuser") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM sourdineuserlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)

                    bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        statesourdineuser = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const intervalle = req[0].intervalle
                        const maximum = req[0].maximum
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM sourdineuserlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], intervalle, maximum)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antisourdineuser(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste], intervalle, maximum)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }
        

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantsourdineuser")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantsourdineuser")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantsourdineuser")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnsourdineuser")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        
                    })
                })
                } else if(interaction.customId == "intervallesourdineuser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE sourdineuser SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatesourdineuser(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "maxsourdineuser") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre d'action \`maximal\` que l'utilisateur peut éxécuter, écrit \`cancel\` pour \`annuler.\``)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE sourdineuser SET maximum = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updatesourdineuser(bot, message, null, msg)
                            }
                        }

                    })
                } else if(interaction.customId == "select2supprembed") {
                    await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("supprembed", "")
                    await bot.db.query(`UPDATE supprembed SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updatesupprembed(bot, message, interaction)
                    })
                } else if(interaction.customId == "supprembedactivate") {
                    await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE supprembed SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatesupprembed(bot, message, interaction)
                        })
                } else if(interaction.customId == "supprembedperms") {
                    await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE supprembed SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatesupprembed(bot, message, interaction)
                            })
                }else if(interaction.customId == "supprembedlogs") {
                    await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE supprembed SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatesupprembed(bot, message, interaction)
                            })
                } else if(interaction.customId == "supprembedlogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE supprembed SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updatesupprembed(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE supprembed SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updatesupprembed(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                    })
                } else if(interaction.customId == "aftersupprembed") {
                    await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultsupprembed")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2supprembed')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulsupprembed')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('bannisupprembed')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprrolesupprembed')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunsupprembed')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("supprembedlogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantsupprembed")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforesupprembed")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row3 = new Discord.ActionRowBuilder()

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                        
                        await interaction.update({ embeds: [supprembedEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row3] })
                            })
                } else if(interaction.customId == "beforesupprembed") {
                    updatesupprembed(bot, message, interaction)
                } else if(interaction.customId == "returnsupprembed" || interaction.customId == "select" && interaction.values[0] == "supprembed") {
                    updatesupprembed(bot, message, interaction)
                } else if(interaction.customId == "select2deleterole") {
                    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("deleterole", "")
                    await bot.db.query(`UPDATE deleterole SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updatedeleterole(bot, message, interaction)
                    })
                } else if(interaction.customId == "deleteroleactivate") {
                    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE deleterole SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatedeleterole(bot, message, interaction)
                        })
                } else if(interaction.customId == "deleteroleperms") {
                    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE deleterole SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedeleterole(bot, message, interaction)
                            })
                }else if(interaction.customId == "deleterolelogs") {
                    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE deleterole SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedeleterole(bot, message, interaction)
                            })
                } else if(interaction.customId == "deleterolelogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE deleterole SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updatedeleterole(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE deleterole SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updatedeleterole(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })} else if(interaction.customId == "select3deleterole") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE deleterole SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatedeleterole(bot, message, interaction)
                            })
                } else if(interaction.customId == "afterdeleterole") {
                    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdeleterole")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2deleterole')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expuldeleterole')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('bannideleterole')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroledeleterole')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucundeleterole')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("deleterolelogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantdeleterole")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforedeleterole")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3deleterole')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                        
                        await interaction.update({ embeds: [deleteroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
                            })
                } else if(interaction.customId == "beforedeleterole") {
                    updatedeleterole(bot, message, interaction)
                } else if(interaction.customId == "utilisateurIndependantdeleterole") {
                    bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deleterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeleterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeleterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeleterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "returndeleterole" || interaction.customId == "select" && interaction.values[0] == "deleterole") {
                    updatedeleterole(bot, message, interaction)
                } else if(interaction.customId == "previousindependantdeleterole") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndeleterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantdeleterole") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndeleterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantdeleterole") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndeleterole")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistdeleterole')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                    
                } else if(interaction.customId == "userlistdeleterole") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM deleterolelistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO deleterolelistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statedeleterole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deleterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeleterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeleterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeleterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantdeleterole") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deletealldeleterole")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM deleterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistdeleterole')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                  } else if(interaction.customId == "optionslistdeleterole") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM deleterolelistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statedeleterole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deleterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeleterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeleterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeleterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "deletealldeleterole") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM deleterolelistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statedeleterole = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deleterolelistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deleteroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeleterole")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeleterole")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeleterole")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeleterole")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "select2deletechannel") {
                    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("deletechannel", "")
                    await bot.db.query(`UPDATE deletechannel SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updatedeletechannel(bot, message, interaction)
                    })
                } else if(interaction.customId == "deletechannelactivate") {
                    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE deletechannel SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updatedeletechannel(bot, message, interaction)
                        })
                } else if(interaction.customId == "deletechannelperms") {
                    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE deletechannel SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedeletechannel(bot, message, interaction)
                            })
                }else if(interaction.customId == "deletechannellogs") {
                    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE deletechannel SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updatedeletechannel(bot, message, interaction)
                            })
                } else if(interaction.customId == "deletechannellogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE deletechannel SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updatedeletechannel(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE deletechannel SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updatedeletechannel(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })} else if(interaction.customId == "select3deletechannel") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE deletechannel SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updatedeletechannel(bot, message, interaction)
                            })
                } else if(interaction.customId == "afterdeletechannel") {
                    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdeletechannel")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2deletechannel')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expuldeletechannel')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('bannideletechannel')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroledeletechannel')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucundeletechannel')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("deletechannellogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantdeletechannel")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforedeletechannel")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3deletechannel')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        row3.addComponents(g)
                        
                        await interaction.update({ embeds: [deletechannelEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
                            })
                } else if(interaction.customId == "beforedeletechannel") {
                    updatedeletechannel(bot, message, interaction)
                } else if(interaction.customId == "utilisateurIndependantdeletechannel") {
                    bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deletechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, punition == "on" ? "🔒" : "🔓", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeletechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeletechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeletechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                } else if(interaction.customId == "returndeletechannel" || interaction.customId == "select" && interaction.values[0] == "deletechannel") {
                    updatedeletechannel(bot, message, interaction)
                } else if(interaction.customId == "previousindependantdeletechannel") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndeletechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantdeletechannel") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndeletechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantdeletechannel") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returndeletechannel")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistdeletechannel')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                    
                } else if(interaction.customId == "userlistdeletechannel") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM deletechannellistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO deletechannellistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statedeletechannel = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deletechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeletechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeletechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeletechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                } else if(interaction.customId == "removeindependantdeletechannel") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deletealldeletechannel")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM deletechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistdeletechannel')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                  } else if(interaction.customId == "optionslistdeletechannel") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM deletechannellistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statedeletechannel = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deletechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeletechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeletechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeletechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "deletealldeletechannel") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM deletechannellistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
statedeletechannel = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        bot.db.query(`SELECT * FROM deletechannellistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = deletechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste])
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantdeletechannel")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantdeletechannel")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantdeletechannel")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returndeletechannel")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})
                  } else if(interaction.customId == "select2antispam") {
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    const action = interaction.values[0].replace("antispam", "")
                    await bot.db.query(`UPDATE antispam SET punition = "${action}" WHERE guildId = ${message.guild.id}`);
                    updateantispam(bot, message, interaction)
                    })
                } else if(interaction.customId == "antispamactivate") {
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                    await bot.db.query(`UPDATE antispam SET state = "${req[0].state == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                    updateantispam(bot, message, interaction)
                        })
                } else if(interaction.customId == "antispamperms") {
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antispam SET permission = "${req[0].permission == "on" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateantispam(bot, message, interaction)
                            })
                }else if(interaction.customId == "antispamlogs") {
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        if(req[0].logs == "on") ok = "✅"
                        else if(req[0].logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(req[0].logs) ? `${message.guild.channels.cache.get(req[0].logs).name} (ID: ${req[0].logs})` : "✅"
                        await bot.db.query(`UPDATE antispam SET logs = "${ok == "✅" ? "off" : "on"}" WHERE guildId = ${message.guild.id}`);
                        updateantispam(bot, message, interaction)
                            })
                } else if(interaction.customId == "antispamlogsChannelLogs") {
                    interaction.deferUpdate()
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const embed = new Discord.EmbedBuilder()
                    .setDescription(`<:better_pending:1147567160344981587>\`Mentionne\` ou envoie-moi \`l'identifiant\` du \`salon\`\nque tu souhaites ajouter, écrit \`cancel\` pour \`annuler\`\nou \`delete\` pour \`supprimer\` le salon actuel.\n`)
                    .setColor("#2c2f33")    
                    let filter2 = (m) => m.author.id === message.user.id
                    const msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        }
                        else if(collected.first().content == "delete") {
                            await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antispam SET logs = "on" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous venez de supprimer le salon actuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500)
                                updateantispam(bot, message, null, msg2)
                                })
                        } else if(collected.first().mentions.channels.first() || message.guild.channels.cache.get(collected.first().content)) { //pr le type du salon ajuster la commande
                            await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                            msg2.delete(), collected.first().delete()
                            await bot.db.query(`UPDATE antispam SET logs = "${collected.first().mentions.channels.first().id ? collected.first().mentions.channels.first().id : message.guild.channels.cache.get(collected.first()).id}" WHERE guildId = ${message.guild.id}`);
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> J'ai bien défini le salon ${collected.first().mentions.channels.first() ? collected.first().mentions.channels.first() : message.guild.channels.cache.get(collected.first())}.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            await wait(500), updateantispam(bot, message, null, msg2)
                                })
                        } else {
                            msg2.delete(), collected.first().delete()
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué de salon textuel.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                        }
                    }).catch(e => {
                        console.log(e)
                            msg2.delete()
                          })
                })} else if(interaction.customId == "select3antispam") {
                    let a;
                    if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser', 'propriouser'])) a = "proprioblancheindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'propriouser'])) a = "proprioblanche" 
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['propriouser'])) a = "proprio"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser'])) a = "blanche"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser'])) a = "independant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['independantuser', 'propriouser'])) a = "proprioindependant"
                    else if(JSON.stringify(interaction.values.sort()) == JSON.stringify(['blancheuser', 'independantuser'])) a = "blancheindependant"
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        await bot.db.query(`UPDATE antispam SET reste = "${a}" WHERE guildId = ${message.guild.id}`);
                        updateantispam(bot, message, interaction)
                            })
                } else if(interaction.customId == "afterantispam") {
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                        const msgTime = req[0].message
                        const intervalle = req[0].intervalle
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultantispam")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2antispam')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulantispam')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniantispam')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Exclure temporairement.")
                            .setValue('excluretempotoxicite')
                            .setDefault(puni[req[0].punition] == "Exclure temporairement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleantispam')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunantispam')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );
                
                        const d = new Discord.ButtonBuilder()
                        .setLabel("Salon")
                        .setCustomId("antispamlogsChannelLogs")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const e = new Discord.ButtonBuilder()
                        .setLabel("Indépendant")
                        .setCustomId("utilisateurIndependantantispam")
                        .setEmoji("<:paper:1228316546313748542>")
                        .setStyle(Discord.ButtonStyle.Primary)
                        const g = new Discord.ButtonBuilder()
                        .setCustomId("beforeantispam")
                        .setEmoji("<:better_previous:1148608585463496824>")
                        .setStyle(Discord.ButtonStyle.Success)
                        const h = new Discord.ButtonBuilder()
                        .setCustomId("msgantispam")
                        .setEmoji("<:better_plume:1147503670720725083>")
                        .setLabel("Message")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const i = new Discord.ButtonBuilder()
                        .setCustomId("intervalleantispam")
                        .setEmoji("<:horloge:1229875716284223580>")
                        .setLabel("Intervalle")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const j = new Discord.ButtonBuilder()
                        .setCustomId("ignorerAntispam")
                        .setEmoji("<:folder:1229004211614646342>")
                        .setLabel("Ignorer")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        const k = new Discord.ButtonBuilder()
                        .setCustomId("dureeantispam")
                        .setEmoji("<:horloge:1229875716284223580>")
                        .setStyle(Discord.ButtonStyle.Secondary)
                        .setLabel("Durée")
                        const l = new Discord.ButtonBuilder()
                        .setCustomId("gaucheoudroite")
                        .setEmoji("<:laoula:1230971613693087784>")
                        .setStyle(Discord.ButtonStyle.Success)
                        let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3antispam')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row3 = new Discord.ActionRowBuilder()
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e
                        if(ok !== "❌" && inde !== null) row3.addComponents(d)
                        if(ok !== "❌" || !inde == null) row3.addComponents(h)
                        row3.addComponents(i, j) 
                        if(ok == "❌" && inde == null) row3.addComponents(k, g)
                        else row3.addComponents(l)
                        
                        await bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            await interaction.update({ embeds: [antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)], components: [row, row2, row4, row3] })
                        })
                            })
                } else if(interaction.customId == "beforeantispam") {
                    updateantispam(bot, message, interaction)
                } else if(interaction.customId == "utilisateurIndependantantispam") {
                    bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                        const msgTime = req[0].message
                        const intervalle = req[0].interval
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const channelnb = req.length
                        bot.db.query(`SELECT * FROM antispamlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantispam")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantispam")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantispam")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })
                    })
                })
                } else if(interaction.customId == "returnantispam" || interaction.customId == "select" && interaction.values[0] == "antispam") {
                    updateantispam(bot, message, interaction)
                } else if(interaction.customId == "previousindependantantispam") {
                    interaction.deferUpdate()
                    if (currentPage > 0) {
                    currentPage--;
                    button1.setDisabled(currentPage === 0);
                    button4.setDisabled(false);    
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantispam")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                     }
                } else if(interaction.customId == "afterindependantantispam") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                    currentPage++;
                    button1.setDisabled(false);
                    button4.setDisabled(currentPage === totalPages - 1);
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantispam")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)

                    const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)
                    msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows, rows2],
                      });
                    }
                } else if(interaction.customId == "addindependantantispam") {
                    button5 = new Discord.ButtonBuilder()
                    .setCustomId("pageowner")
                    .setLabel(`${currentPage + 1}/${totalPages}`)
                    .setDisabled(true)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantispam")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const selectmenulogs = new Discord.UserSelectMenuBuilder()
                    .setCustomId('userlistantispam')
                    .setMaxValues(25);

                    const rows = new Discord.ActionRowBuilder().addComponents(selectmenulogs)
                    const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                    interaction.update({ components: [rows, rows2]})
                    
                } else if(interaction.customId == "userlistantispam") {
                    interaction.deferUpdate()
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antispamlistuser WHERE guildId = "${message.guild.id}" AND userId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antispamlistuser (guildId, userId) VALUES (${message.guild.id}, ${id})`)
                    })
                    })

                    await wait(500)

                    bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateantispam = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                        const msgTime = req[0].message
                        const intervalle = req[0].interval
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const channelnb = req.length
                        bot.db.query(`SELECT * FROM antispamlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantispam")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantispam")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantispam")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})})
                } else if(interaction.customId == "removeindependantantispam") {
                    interaction.deferUpdate()
                button7 = new Discord.ButtonBuilder()
                .setCustomId("deleteallantispam")
                .setEmoji(`<:poubelle:1228059993274580992>`)
                .setStyle(Discord.ButtonStyle.Primary)
                button8 = new Discord.ButtonBuilder()
                .setCustomId("previousowner2")
                .setEmoji(`<:better_previous:1148608585463496824> `)
                .setDisabled(true)
                .setStyle(Discord.ButtonStyle.Secondary)
                button9 = new Discord.ButtonBuilder()
                .setCustomId("afterowner2")
                .setStyle(Discord.ButtonStyle.Secondary)
                .setEmoji(`<:better_after:1148608588454051840>`)

                if(req.length < 10) button9.setDisabled(true)
                let menuSelect, aa
                const menuOption = []; 

                bot.db.query(`SELECT * FROM antispamlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                for (let i = 0; i < req.length; i++) {
                    const option = req[i];

                    const user = message.guild.members.cache.get(option.userId)
                    if(user) {
                        menuOption.push({ 
                            name: `${user.user.username} (ID: ${option.userId})`, 
                            value: option.userId
                        }); 
                    } else {
                    menuOption.push({ 
                        name: `Introuvable (ID: ${option.userId})`, 
                        value: option.userId
                    }); 
                    }
                }


                menuSelect = new Discord.StringSelectMenuBuilder()
                .setCustomId('optionslistantispam')
                .setMaxValues(req.length)
                .setMinValues(1)
                
                menuOption.forEach(opt => {
                aa = new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(opt.name)
                        .setValue(opt.value)
                    menuSelect.addOptions(aa);
                });
                
                
                rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                msg.edit({ embeds: [embeds[0]], components: [new Discord.ActionRowBuilder().addComponents([menuSelect]), rows] })
                })
                } else if(interaction.customId == "previousowner2") {
                    if (currentPage > 0) {
                        currentPage--;
                        button8.setDisabled(currentPage === 0);
                        button9.setDisabled(false);
              
                        button5 = new Discord.ButtonBuilder()
                          .setCustomId("pageowner")
                          .setLabel(`${currentPage + 1}/${totalPages}`)
                          .setDisabled(true)
                          .setStyle(Discord.ButtonStyle.Secondary)
                        rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                        msg.edit({
                          embeds: [embeds[currentPage]],
                          components: [rows],
                        });
                      }
                } else if(interaction.customId == "afterowner2") {
                    interaction.deferUpdate()
                    if (currentPage < totalPages - 1) {
                      currentPage++;
            
                      button5 = new Discord.ButtonBuilder()
                        .setCustomId("pageowner")
                        .setLabel(`${currentPage + 1}/${totalPages}`)
                        .setDisabled(true)
                        .setStyle(Discord.ButtonStyle.Secondary)
            
                        button8.setDisabled(false);
                        button9.setDisabled(currentPage === totalPages - 1);
                      rows = new Discord.ActionRowBuilder().addComponents(button5, button6, button7, button8, button9)
                      msg.edit({
                        embeds: [embeds[currentPage]],
                        components: [rows],
                      });
                    }
                  } else if(interaction.customId == "optionslistantispam") {
                    interaction.deferUpdate()
                      interaction.values.forEach(id => {
                        bot.db.query(`DELETE FROM antispamlistuser WHERE userId = ${id}`);
                      })
            
                    await wait(500)
                    bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateantispam = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                        const msgTime = req[0].message
                        const intervalle = req[0].interval
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const channelnb = req.length
                        bot.db.query(`SELECT * FROM antispamlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantispam")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantispam")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantispam")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})})
                  } else if(interaction.customId == "deleteallantispam") {
                    interaction.deferUpdate()
                    bot.db.query(`DELETE FROM antispamlistuser WHERE guildId = ${message.guild.id}`);
                    await wait(500)
                    bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
stateantispam = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                        const msgTime = req[0].message
                        const intervalle = req[0].interval
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                        await bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            const channelnb = req.length
                        bot.db.query(`SELECT * FROM antispamlistuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                            embeds = []
                            currentPage = 0
                            totalPages = Math.ceil(req.length / itemsPerPage);
                            if(req.length < 1) {
                                const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: "```py\nAucun.```"})
                                totalPages = totalPages + 1
                                embeds.push(embed)
                            } else {
                                for (let i = 0; i < req.length; i += itemsPerPage) {
                                    let users = ""
                                    for (let j = i; j < i + itemsPerPage && j < req.length; j++) {
                                    const member = bot.users.cache.get(req[j].userId) 
                                        if(member) {
                                            users += `${member.username} (ID: ${req[j].userId})\n`;
                                        }
                                    }
                                    if(users === "") description = "Aucun."
                                    const embed = antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], channelnb, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)
                                    embed.addFields({ name: `・Utilisateurs indépendant autorisé (${req.length})`, value: `\`\`\`py\n${users}\`\`\``})
                                    embeds.push(embed);
                                }
                            }

                            button1 = new Discord.ButtonBuilder()
                            .setCustomId("previousindependantantispam")
                            .setEmoji(`<:better_previous:1148608585463496824> `)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            button2 = new Discord.ButtonBuilder()
                            .setCustomId("addindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_add:1148608590110789773>`)
                            button3 = new Discord.ButtonBuilder()
                            .setCustomId("removeindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_remove:1148608592937754725>`)
                            button4 = new Discord.ButtonBuilder()
                            .setCustomId("afterindependantantispam")
                            .setStyle(Discord.ButtonStyle.Secondary)
                            .setEmoji(`<:better_after:1148608588454051840>`)
                            button5 = new Discord.ButtonBuilder()
                            .setCustomId("pageindependantantispam")
                            .setLabel(`${currentPage + 1}/${totalPages}`)
                            .setDisabled(true)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            const button6 = new Discord.ButtonBuilder()
                            .setCustomId("returnantispam")
                            .setEmoji(`<:better_no:1147096824440705024>`)
                            .setStyle(Discord.ButtonStyle.Secondary)
                            
                            if(req.length < 10) button4.setDisabled(true)
                            if(req.length < 1) button3.setDisabled(true)

                            const rows = new Discord.ActionRowBuilder().addComponents(button1, button2, button3, button4)
                            const rows2 = new Discord.ActionRowBuilder().addComponents(button5, button6)

                            msg.edit({ embeds: [embeds[currentPage]], components: [rows, rows2]})
                        })})})
                  } else if(interaction.customId == "gaucheoudroite") {
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                        const msgTime = req[0].message
                        const intervalle = req[0].intervalle
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultantispam")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2antispam')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulantispam')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniantispam')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Exclure temporairement.")
                            .setValue('excluretempotoxicite')
                            .setDefault(puni[req[0].punition] == "Exclure temporairement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleantispam')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunantispam')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );

                    const g = new Discord.ButtonBuilder()
                    .setCustomId("beforeantispam")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)
                    const button6 = new Discord.ButtonBuilder()
                    .setCustomId("returnantispam")
                    .setEmoji(`<:better_no:1147096824440705024>`)
                    .setStyle(Discord.ButtonStyle.Secondary)
                    const f = new Discord.ButtonBuilder()
                    .setCustomId("afterantispam2")
                    .setEmoji("<:better_after:1148608588454051840>")
                    .setStyle(Discord.ButtonStyle.Success)

                    let inde = null
                        const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3antispam')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                    interaction.update({ components: [row, row2, row4, new Discord.ActionRowBuilder().addComponents(g, button6, f)]})

                        })

                  } else if(interaction.customId == "msgantispam") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi le nombre de message \`maximal\` de l'action, écrit \`cancel\` pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué un nombre.`)
                            if(isNaN(collected.first().content)) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE antispam SET message = "${collected.first().content}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié le nombre d'action maximal pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateantispam(bot, message, null, msg)
                            }
                        }

                    })
                  } else if(interaction.customId == "afterantispam2") {
                    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
                        let ok;
                
                        const state = req[0].state
                        stateaddbot = req[0].state
                        const logs = req[0].logs
                        const permission = req[0].permission
                        const punition = req[0].punition
                        const reste = req[0].reste
                        const duree = req[0].duree
                        const inclus = req[0].inclus
                        const msgTime = req[0].message
                        const intervalle = req[0].intervalle
                
                        if(logs == "on") ok = "✅"
                        else if(logs == "off") ok = "❌"
                        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
                
                        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultantispam")
                        const select2 = new Discord.StringSelectMenuBuilder()
                            .setCustomId('select2antispam')
                            .addOptions(
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Expulsion.")
                            .setValue('expulantispam')
                            .setDefault(puni[req[0].punition] == "Expulsion."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Bannissement.")
                            .setValue('banniantispam')
                            .setDefault(puni[req[0].punition] == "Bannissement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Exclure temporairement.")
                            .setValue('excluretempotoxicite')
                            .setDefault(puni[req[0].punition] == "Exclure temporairement."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Suppression de ces rôles.")
                            .setValue('supprroleantispam')
                            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
                            new Discord.StringSelectMenuOptionBuilder()
                            .setLabel("Aucune.")
                            .setValue('aucunantispam')
                            .setDefault(puni[req[0].punition] == "Aucune."),
                        );

                    const k = new Discord.ButtonBuilder()
                    .setCustomId("dureeantispam")
                    .setEmoji("<:horloge:1229875716284223580>")
                    .setStyle(Discord.ButtonStyle.Secondary)
                    .setLabel("Durée")
                    const g = new Discord.ButtonBuilder()
                    .setCustomId("beforeantispam")
                    .setEmoji("<:better_previous:1148608585463496824>")
                    .setStyle(Discord.ButtonStyle.Success)

                    const select3 = new Discord.StringSelectMenuBuilder()
                        .setCustomId('select3antispam')
                        .setPlaceholder("Choisis les utilisateurs autorisés")
                        .setMaxValues(3)
                        .addOptions(
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste des propriétaires.`)
                        .setValue('propriouser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur dans la liste blanche.`)
                        .setValue('blancheuser')
                        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
                        new Discord.StringSelectMenuOptionBuilder()
                        .setLabel(`Utilisateur indépendant.`)
                        .setValue('independantuser')
                        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
                        );
                
                        const row = new Discord.ActionRowBuilder().addComponents(select);
                        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
                        const row4 = new Discord.ActionRowBuilder().addComponents(select3);

                    interaction.update({ components: [row, row2, row4, new Discord.ActionRowBuilder().addComponents(k, g)]})
                        })
                  } else if(interaction.customId == "intervalleantispam") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel \`pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE antispam SET intervalle = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée de réinitialisation pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateantispam(bot, message, null, msg)
                            }
                        }
                    })
                  } else if(interaction.customId == "dureeantispam") {
                    interaction.deferUpdate()
                    const embed = new Discord.EmbedBuilder()
                    .setColor("#2c2f33")    
                    .setDescription(`<:better_pending:1147567160344981587> Envoie-moi la \`durée\` que tu souhaite modifier, écrit \`cancel\` pour \`annuler\`.`)
                    let filter2 = (m) => m.author.id === message.user.id
                    let msg2 = await message.channel.send({ embeds: [embed] })
                    let collected = await message.channel.awaitMessages({
                        filter: filter2,
                        max: 1,
                        time: 30000,
                        errors: ["time"]
                      }).then(async (collected) => {
                        if(collected.first().content == "cancel") {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_yes:1147114141652369490> Vous avez bien annulé cette action.`)
                            message.channel.send({ embeds: [embed] }).then(m => setTimeout(() => { m.delete() }, 5000))
                            return msg2.delete(), collected.first().delete()
                        } else {
                            const embed = new Discord.EmbedBuilder()
                            .setColor("#2c2f33") 
                            .setDescription(`<:better_no:1147096824440705024> Vous n'avez pas indiqué une bonne durée.`)
                            if(testDuree(collected.first().content) == null) return message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                            else {
                                await bot.db.query(`UPDATE antispam SET duree = "${testDuree(collected.first().content)}" WHERE guildId = ${message.guild.id}`);
                                const embed = new Discord.EmbedBuilder()
                                .setColor("#2c2f33") 
                                .setDescription(`<:better_yes:1147114141652369490> Vous avez modifié la durée pour **${collected.first().content}**.`)
                                message.channel.send({ embeds: [embed]}).then(m => setTimeout(() => { m.delete() }, 5000)), msg2.delete(), collected.first().delete()
                                return updateantispam(bot, message, null, msg)
                            }
                        }
                    })
                } else if(interaction.customId == "ignorerantispam") {
                    bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => {
                    const channelList = new Discord.ChannelSelectMenuBuilder()
                    .setCustomId('channelantispam')
                    .setPlaceholder("Choisis les salons que tu souhaites ignorer")
                    .setMaxValues(25);
                    let menuSelect, aa
                    if(req.length > 0) {
                    const menuOption = []; 

                    for (let i = 0; i < req.length; i++) {
                        const option = req[i];

                        const channel = message.guild.channels.cache.get(option.channelId)
                        if(channel) {
                            menuOption.push({ 
                                name: `${channel.name} (ID: ${option.channelId})`, 
                                value: option.channelId
                            }); 
                        } else {
                        menuOption.push({ 
                            name: `Introuvable (ID: ${option.channelId})`, 
                            value: option.channelId
                        }); 
                        }
                    }


                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistantispam2')
                    .setMaxValues(req.length)
                    .setMinValues(1)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    
                    menuOption.forEach(opt => {
                    aa = new Discord.StringSelectMenuOptionBuilder()
                            .setLabel(opt.name)
                            .setValue(opt.value)
                            .setEmoji("<:hashtag:1230136272530444329>")
                        menuSelect.addOptions(aa);
                    });
                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                } else {
                    menuSelect = new Discord.StringSelectMenuBuilder()
                    .setCustomId('optionslistantispam2')
                    .setDisabled(true)
                    .setPlaceholder("Choisis les salons que tu ne souhaites plus ignorer")
                    .addOptions( new Discord.StringSelectMenuOptionBuilder()
                        .setLabel("https://discord.gg/uhq")
                        .setValue("salut")
                        .setEmoji("<:hashtag:1230136272530444329>")
                    )

                    interaction.update({ components: [new Discord.ActionRowBuilder().addComponents([channelList]), new Discord.ActionRowBuilder().addComponents([menuSelect])] })
                   
                }
                })

                } else if(interaction.customId == "channelantispam") {
                    interaction.values.forEach(id => {
                    bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}" AND channelId = "${id}"`, async (err, req) => {
                        if(req.length < 1) bot.db.query(`INSERT INTO antispamchannel (guildId, channelId) VALUES ("${message.guild.id}", "${id}")`)
                    })
                    })

                    await wait(500)

                    updateantispam(bot, message, interaction)
                } else if(interaction.customId == "optionslistantispam2") {
                    interaction.values.forEach(id => {
                      bot.db.query(`DELETE FROM antispamchannel WHERE channelId = ${id}`);
                    })
          
                  await wait(500)

                  updateantispam(bot, message, interaction)
                }
            })  
            
        

            collector.on('end', async () => { // merci 214339832061624320 (max.vip)
                try {
                    if (msg.components) {
                        msg.components.forEach((row) => {
                            row.components.forEach((component) => {
                                component.data.disabled = true
                            })
                        })
                        await msg.edit({ components: msg.components })
                    }
                } catch (error) {
                    console.error(error)
                }
            })
    })}) })})})})})})})})})})})})})})})})}) //FIN 12000 lignes quoi ?????? il t'en reste 10 000 encore après ^^
  })})})})})
  async function updateAntiBot(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM antibot WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
stateaddbot = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultAntiBot")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2Antibot')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulAntibot')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('banniAntibot')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroleAntibot')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucunAntibot')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("Antibotperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("Antibotactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("Antibotlogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("AntibotlogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantAntibot")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterAntiBot")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3Antibot')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [antibotEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        else await msg.edit ({ embeds: [antibotEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        })
    
  }

  async function updateRoleAdd(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM antiroleadd WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        stateroleadd = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        await bot.db.query(`SELECT * FROM antiroleaddperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
            const permsNb = req.length
            const select4 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select4antiroleadd')
            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
            .setMaxValues(23)
.setMinValues(0)

            const perms = req.map(row => row.perm);
            
            select4.addOptions(
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Expulser des membres.")
                .setValue('expulsemember')
                .setDefault(perms.includes("expulsemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Bannir des membres")
                .setValue('banmember')
                .setDefault(perms.includes("banmember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Administrateur")
                .setValue('administrator')
                .setDefault(perms.includes("administrator") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les salons")
                .setValue('managechannel')
                .setDefault(perms.includes("managechannel") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer le serveur")
                .setValue('manageguild')
                .setDefault(perms.includes("manageguild") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Voir les logs du serveur ")
                .setValue('viewlogsserver')
                .setDefault(perms.includes("viewlogsserver") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les messages ")
                .setValue('managemsg')
                .setDefault(perms.includes("managemsg") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                .setValue('pingeveryone')
                .setDefault(perms.includes("pingeveryone") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Rendre les membres muets")
                .setValue('muutemember')
                .setDefault(perms.includes("muutemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Mettre en sourdine des membres ")
                .setValue('sourdinemember')
                .setDefault(perms.includes("sourdinemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Déplacer des membres")
                .setValue('moovemember')
                .setDefault(perms.includes("moovemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Changer le pseudo")
                .setValue('changenick')
                .setDefault(perms.includes("changenick") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les pseudos")
                .setValue('managenick')
                .setDefault(perms.includes("managenick") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les rôles ")
                .setValue('managerole')
                .setDefault(perms.includes("managerole") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les webhooks")
                .setValue('managewebhook')
                .setDefault(perms.includes("managewebhook") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les émojis et les autocollants ")
                .setValue('manageemoji')
                .setDefault(perms.includes("manageemoji") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les évènements")
                .setValue('manageevent')
                .setDefault(perms.includes("manageevent") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les fils")
                .setValue('managethread')
                .setDefault(perms.includes("managethread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Utiliser des autocollants externes ")
                .setValue('usesticker')
                .setDefault(perms.includes("usesticker") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Créer des fils publics")
                .setValue('createpublicthread')
                .setDefault(perms.includes("createpublicthread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Utiliser des fils privés ")
                .setValue('useprivatethread')
                .setDefault(perms.includes("useprivatethread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Créer des fils privés")
                .setValue('createprivatethread')
                .setDefault(perms.includes("createprivatethread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Exclure temporairement")
                .setValue('kicktime')
                .setDefault(perms.includes("kicktime") ? true : false),

            )
            await bot.db.query(`SELECT * FROM antiroleaddrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
            const roleNb = req.length
        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultRoleAdd")

        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2antiroleadd')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulantiroleadd')
            .setDefault(puni[punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('banniantiroleadd')
            .setDefault(puni[punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroleantiroleadd')
            .setDefault(puni[punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucunantiroleadd')
            .setDefault(puni[punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("antiroleaddperms")
        .setEmoji(permission == "on" ? "<:permsclose:1228311975516307456>" : "<:permsopen:1228311976858353746>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(state == "on" ? "Désactiver" : "Activer")
        .setCustomId("antiroleaddactivate")
        .setEmoji(state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("antiroleaddlogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("antiroleaddlogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantantiroleadd")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterantiroleadd")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        const g = new Discord.ButtonBuilder()
        .setCustomId("inclusaddrole")
        .setEmoji("<:folder:1229004211614646342>")
        .setStyle(Discord.ButtonStyle.Secondary)
        .setLabel('Inclus')
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3antiroleadd')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(reste == "proprioblanche" || reste == "proprio" || reste == "proprioindependant" || reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(reste == "proprioblanche" || reste == "blanche"|| reste == "blancheindependant" || reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(reste == "proprioindependant" || reste == "blancheindependant" || reste == "independant" || reste == "proprioblancheindependant"),
    );



        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        const row5 = new Discord.ActionRowBuilder().addComponents(select4);
        row3.addComponents(b, a)
        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌") row3.addComponents(f)
        if(ok == "❌" && inde == null) row3.addComponents(g)
        
        if(interaction) await interaction.update({ embeds: [antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)], components: [row, row2, row5, row4, row3] })
        else msg.edit({ embeds: [antiroleaddEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)], components: [row, row2, row5, row4, row3] })
            })
        })
    })
  }

  async function updateAntiBan(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM antiban WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statedecouser = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultBan")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2Antiban')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulAntiban')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('banniAntiban')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroleAntiban')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunAntiban')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("Antibanperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("Antibanactivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("Antibanlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("AntibanlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantAntiban")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterAntiban")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("intervalleAntiban")
    .setEmoji("<:horloge:1229875716284223580>")
    .setLabel("Intervalle")
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("maxAntiban")
    .setEmoji("<:__:1229876600590438452>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setLabel("Maximum")
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3Antiban')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    
    if(interaction) await interaction.update({ embeds: [updateantiban(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [updateantiban(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    })
}

async function updateAntiThreadCreate(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM antithreadcreate WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statethreadcreate = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste
    const duree = req[0].duree

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultthreadcreate")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2Antithreadcreate')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulAntithreadcreate')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('banniAntithreadcreate')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Exclure temporairement.")
        .setValue('excluretempoAntithreadcreate')
        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroleAntithreadcreate')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunAntithreadcreate')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("Antithreadcreateperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setDisabled(true)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("Antithreadcreateactivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("Antithreadcreatelogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("AntithreadcreatelogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantAntithreadcreate")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterAntithreadcreate")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("ignorerAntithreadcreate")
    .setEmoji("<:folder:1229004211614646342>")
    .setLabel("Ignorer")
    .setStyle(Discord.ButtonStyle.Secondary)
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3Antithreadcreate')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    if(ok !== "❌") row3.addComponents(f)
    await bot.db.query(`SELECT * FROM antithreadcreatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
    if(interaction) await interaction.update({ embeds: [antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antithreadcreateEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null)], components: [row, row2, row4, row3] })
    })
})
} 
async function updateAnticreaterole(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM createrole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        statecreaterole = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
    
        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultcreaterole")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2createrole')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulcreaterole')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('bannicreaterole')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprrolecreaterole')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucuncreaterole')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("createroleperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("createroleactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("createrolelogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("createrolelogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantcreaterole")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("aftercreaterole")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3createrole')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [anticreaterole(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        else await msg.edit ({ embeds: [anticreaterole(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        })
  }
  async function updateAnticreatechannel(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM createchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        statecreatechannel = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
    
        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultcreatechannel")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2createchannel')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulcreatechannel')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('bannicreatechannel')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprrolecreatechannel')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucuncreatechannel')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("createchannelperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("createchannelactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("createchannellogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("createchannellogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantcreatechannel")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("aftercreatechannel")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3createchannel')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [anticreatechannel(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        else await msg.edit ({ embeds: [anticreatechannel(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        })
  }
  async function updateAnticreatewebhook(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM createwebhook WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        statecreatewebhook = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"
    
const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultcreatewebhook")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2createwebhook')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulcreatewebhook')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('bannicreatewebhook')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprrolecreatewebhook')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucuncreatewebhook')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("createwebhookperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("createwebhookactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("createwebhooklogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("createwebhooklogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantcreatewebhook")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("aftercreatewebhook")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3createwebhook')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .setDisabled(req[0].action == "clonnchannel")
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );

        const select4 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select4createwebhook')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Clonnage du salon.`)
        .setValue('clonnchannel')
        .setDefault(req[0].action == "clonnchannel"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Suppression.`)
        .setValue('supprchannel')
        .setDefault(req[0].action == "supprchannel"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row5 = new Discord.ActionRowBuilder().addComponents(select4);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [anticreatewebhook(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], puni[req[0].action])], components: [row, row2, row5, row4, row3] })
        else await msg.edit({ embeds: [anticreatewebhook(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], puni[req[0].action])], components: [row, row2, row5, row4, row3] })
        })
  }


  async function updatedecouser(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM decouser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statedecouser = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdecouser")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2decouser')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expuldecouser')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('bannidecouser')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroledecouser')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucundecouser')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("decouserperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("decouseractivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("decouserlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("decouserlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantdecouser")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterdecouser")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("intervalledecouser")
    .setEmoji("<:horloge:1229875716284223580>")
    .setLabel("Intervalle")
    .setDisabled(true)
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("maxdecouser")
    .setEmoji("<:__:1229876600590438452>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setLabel("Maximum")
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3decouser')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    
    if(interaction) await interaction.update({ embeds: [antidecouser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antidecouser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    })
}

async function updatedepluser(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM depluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statedepluser = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdepluser")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2depluser')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expuldepluser')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('bannidepluser')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroledepluser')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucundepluser')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("depluserperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("depluseractivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("depluserlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("depluserlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantdepluser")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterdepluser")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("intervalledepluser")
    .setEmoji("<:horloge:1229875716284223580>")
    .setLabel("Intervalle")
    .setDisabled(true)
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("maxdepluser")
    .setEmoji("<:__:1229876600590438452>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setLabel("Maximum")
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3depluser')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    
    if(interaction) await interaction.update({ embeds: [antidepluser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antidepluser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    })
}

async function updateremoverole(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM removerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        stateremoverole = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        await bot.db.query(`SELECT * FROM removeroleperms WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
            const permsNb = req.length
            const select4 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select4removerole')
            .setPlaceholder("Choisis les permissions que doit contenir l'action.")
            .setMaxValues(23)
.setMinValues(0)

            const perms = req.map(row => row.perm);
            
            select4.addOptions(
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Expulser des membres.")
                .setValue('expulsemember')
                .setDefault(perms.includes("expulsemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Bannir des membres")
                .setValue('banmember')
                .setDefault(perms.includes("banmember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Administrateur")
                .setValue('administrator')
                .setDefault(perms.includes("administrator") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les salons")
                .setValue('managechannel')
                .setDefault(perms.includes("managechannel") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer le serveur")
                .setValue('manageguild')
                .setDefault(perms.includes("manageguild") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Voir les logs du serveur ")
                .setValue('viewlogsserver')
                .setDefault(perms.includes("viewlogsserver") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les messages ")
                .setValue('managemsg')
                .setDefault(perms.includes("managemsg") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Mentionner @everyone, @here, et tous les rôles ")
                .setValue('pingeveryone')
                .setDefault(perms.includes("pingeveryone") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Rendre les membres muets")
                .setValue('muutemember')
                .setDefault(perms.includes("muutemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Mettre en sourdine des membres ")
                .setValue('sourdinemember')
                .setDefault(perms.includes("sourdinemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Déplacer des membres")
                .setValue('moovemember')
                .setDefault(perms.includes("moovemember") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Changer le pseudo")
                .setValue('changenick')
                .setDefault(perms.includes("changenick") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les pseudos")
                .setValue('managenick')
                .setDefault(perms.includes("managenick") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les rôles ")
                .setValue('managerole')
                .setDefault(perms.includes("managerole") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les webhooks")
                .setValue('managewebhook')
                .setDefault(perms.includes("managewebhook") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les émojis et les autocollants ")
                .setValue('manageemoji')
                .setDefault(perms.includes("manageemoji") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les évènements")
                .setValue('manageevent')
                .setDefault(perms.includes("manageevent") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Gérer les fils")
                .setValue('managethread')
                .setDefault(perms.includes("managethread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Utiliser des autocollants externes ")
                .setValue('usesticker')
                .setDefault(perms.includes("usesticker") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Créer des fils publics")
                .setValue('createpublicthread')
                .setDefault(perms.includes("createpublicthread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Utiliser des fils privés ")
                .setValue('useprivatethread')
                .setDefault(perms.includes("useprivatethread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Créer des fils privés")
                .setValue('createprivatethread')
                .setDefault(perms.includes("createprivatethread") ? true : false),
                new Discord.StringSelectMenuOptionBuilder()
                .setLabel("Exclure temporairement")
                .setValue('kicktime')
                .setDefault(perms.includes("kicktime") ? true : false),

            )
            await bot.db.query(`SELECT * FROM removerolerole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
            const roleNb = req.length
        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultremoverole")

        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2removerole')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulremoverole')
            .setDefault(puni[punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('banniremoverole')
            .setDefault(puni[punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroleremoverole')
            .setDefault(puni[punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucunremoverole')
            .setDefault(puni[punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("removeroleperms")
        .setEmoji(permission == "on" ? "<:permsclose:1228311975516307456>" : "<:permsopen:1228311976858353746>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(state == "on" ? "Désactiver" : "Activer")
        .setCustomId("removeroleactivate")
        .setEmoji(state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("removerolelogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("removerolelogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantremoverole")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterremoverole")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        const g = new Discord.ButtonBuilder()
        .setCustomId("inclusremoverole")
        .setEmoji("<:folder:1229004211614646342>")
        .setStyle(Discord.ButtonStyle.Secondary)
        .setLabel('Inclus')
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3removerole')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(reste == "proprioblanche" || reste == "proprio" || reste == "proprioindependant" || reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(reste == "proprioblanche" || reste == "blanche"|| reste == "blancheindependant" || reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(reste == "proprioindependant" || reste == "blancheindependant" || reste == "independant" || reste == "proprioblancheindependant"),
    );



        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        const row5 = new Discord.ActionRowBuilder().addComponents(select4);
        row3.addComponents(b, a)
        if(reste == "independant" || reste == "proprioindependant" || reste == "blancheindependant" || reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌") row3.addComponents(f)
        if(ok == "❌" && inde == null) row3.addComponents(g)
        
        if(interaction) await interaction.update({ embeds: [removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)], components: [row, row2, row5, row4, row3] })
        else msg.edit({ embeds: [removeroleEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], roleNb, permsNb)], components: [row, row2, row5, row4, row3] })
            })
        })
    })
  }
  async function updatetimeout(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM timeout WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statetimeout = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaulttimeout")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2timeout')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expultimeout')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('bannitimeout')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroletimeout')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucuntimeout')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("timeoutperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("timeoutactivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("timeoutlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("timeoutlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependanttimeout")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("aftertimeout")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("intervalletimeout")
    .setEmoji("<:horloge:1229875716284223580>")
    .setLabel("Intervalle")
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("maxtimeout")
    .setEmoji("<:__:1229876600590438452>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setLabel("Maximum")
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3timeout')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    
    if(interaction) await interaction.update({ embeds: [antitimeout(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antitimeout(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    })
}

async function updateexpuluser(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM expuluser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    stateexpuluser = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultexpuluser")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2expuluser')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulexpuluser')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('banniexpuluser')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroleexpuluser')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunexpuluser')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("expuluserperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("expuluseractivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("expuluserlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("expuluserlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantexpuluser")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterexpuluser")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("intervalleexpuluser")
    .setEmoji("<:horloge:1229875716284223580>")
    .setLabel("Intervalle")
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("maxexpuluser")
    .setEmoji("<:__:1229876600590438452>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setLabel("Maximum")
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3expuluser')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    
    if(interaction) await interaction.update({ embeds: [antiexpuluser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antiexpuluser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    })
}
async function updateantilink(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM antilink WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    stateantilink = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste
    const duree = req[0].duree
    const inclus = req[0].inclus

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultantilink")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2antilink')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulantilink')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('banniantilink')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Exclure temporairement.")
        .setValue('excluretempoantilink')
        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroleantilink')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunantilink')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("antilinkperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setDisabled(true)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("antilinkactivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("antilinklogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("antilinklogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantantilink")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterantilink")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("ignorerantilink")
    .setEmoji("<:folder:1229004211614646342>")
    .setLabel("Ignorer")
    .setStyle(Discord.ButtonStyle.Secondary)
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3antilink')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));

    const select4 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select4antilink')
    .setPlaceholder("Choisis ce que doit contenir l'action.")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Contenant une image.`)
    .setValue('image')
    .setDefault(req[0].inclus == "image" || req[0].inclus == "imagediscord" || req[0].inclus == "imagelien" || req[0].inclus == "imagediscordlien"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Contenant une invitation discord.`)
    .setValue('discord')
    .setDefault(req[0].inclus == "discord" || req[0].inclus == "imagediscord"|| req[0].inclus == "imagediscordlien" || req[0].inclus == "liendiscord"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Contenant un lien en général.`)
    .setValue('link')
    .setDefault(req[0].inclus == "lien" || req[0].inclus == "imagelien" || req[0].inclus == "liendiscord" || req[0].inclus == "imagediscordlien"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row5 = new Discord.ActionRowBuilder().addComponents(select4);
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    await bot.db.query(`SELECT * FROM antilinkchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
    if(interaction) await interaction.update({ embeds: [antilinkEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, inclus)], components: [row, row2, row5, row4, row3] })
    else await msg.edit({ embeds: [antilinkEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, inclus)], components: [row, row2, row5, row4, row3] })
    })
})
} 
async function updateantispam(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM antispam WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    stateantilink = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste
    const duree = req[0].duree
    const inclus = req[0].inclus
    const msgTime = req[0].message
    const intervalle = req[0].intervalle

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultantispam")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2antispam')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulantispam')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('banniantispam')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Exclure temporairement.")
        .setValue('excluretempoantispam')
        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroleantispam')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunantispam')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("antispamperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setDisabled(true)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("antispamactivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("antispamlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("antispamlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantantispam")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterantispam")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("ignorerantispam")
    .setEmoji("<:folder:1229004211614646342>")
    .setLabel("Ignorer")
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("msgantispam")
    .setEmoji("<:better_plume:1147503670720725083>")
    .setLabel("Message")
    .setStyle(Discord.ButtonStyle.Secondary)
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3antispam')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(h)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    await bot.db.query(`SELECT * FROM antispamchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
    if(interaction) await interaction.update({ embeds: [antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antispamEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, inclus, intervalle, msgTime)], components: [row, row2, row4, row3] })
    })
})
} 

async function updatetoxicite(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM toxicite WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statetoxicite = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste
    const duree = req[0].duree
    const inclus = req[0].inclus
    const pourcentage = req[0].pourcentage

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaulttoxicite")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2toxicite')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expultoxicite')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('bannitoxicite')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Exclure temporairement.")
        .setValue('excluretempotoxicite')
        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroletoxicite')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucuntoxicite')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("toxiciteperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setDisabled(true)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("toxiciteactivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("toxicitelogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("toxicitelogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependanttoxicite")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("aftertoxicite")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("ignorertoxicite")
    .setEmoji("<:folder:1229004211614646342>")
    .setLabel("Ignorer")
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("pourcentagetoxicite")
    .setEmoji("<:pourcentage:1230815464062713927>")
    .setLabel("Pourcentage")
    .setStyle(Discord.ButtonStyle.Secondary)
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3toxicite')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(h)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    await bot.db.query(`SELECT * FROM toxicitechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
    if(interaction) await interaction.update({ embeds: [toxiciteEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, pourcentage)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [toxiciteEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length, punition == "excluretempo" ? duree : null, pourcentage)], components: [row, row2, row4, row3] })
    })
})
}  

async function updateupdaterole(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM updaterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        stateupdaterole = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultupdaterole")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2updaterole')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulupdaterole')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('banniupdaterole')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroleupdaterole')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucunupdaterole')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("updateroleperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("updateroleactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("updaterolelogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("updaterolelogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantupdaterole")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterupdaterole")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3updaterole')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [updateroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        else await msg.edit ({ embeds: [updateroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        })
    
  }
  async function updateupdatechannel(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM updatechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    stateupdatechannel = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste
    const duree = req[0].duree
    const inclus = req[0].inclus
    const msgTime = req[0].message
    const intervalle = req[0].intervalle

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultupdatechannel")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2updatechannel')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulupdatechannel')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('banniupdatechannel')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Exclure temporairement.")
        .setValue('excluretempoupdatechannel')
        .setDefault(puni[req[0].punition] == "Exclure temporairement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprroleupdatechannel')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunupdatechannel')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("updatechannelperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setDisabled(true)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("updatechannelactivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("updatechannellogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("updatechannellogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantupdatechannel")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("afterupdatechannel")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("ignorerupdatechannel")
    .setEmoji("<:folder:1229004211614646342>")
    .setLabel("Ignorer")
    .setStyle(Discord.ButtonStyle.Secondary)
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3updatechannel')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    await bot.db.query(`SELECT * FROM updatechannelchannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
    if(interaction) await interaction.update({ embeds: [updatechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [updatechannelEmbed(state == "on" ? "✅" : "❌", ok, permission == "on" ? "🔓" : "🔒", puni[punition], rest[reste], req.length)], components: [row, row2, row4, row3] })
    })
})
} 

async function updatemassiverole(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM massiverole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        statemassiverole = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultmassiverole")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2massiverole')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulmassiverole')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('bannimassiverole')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprrolemassiverole')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucunmassiverole')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("massiveroleperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        .setDisabled(true)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("massiveroleactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("massiverolelogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("massiverolelogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantmassiverole")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("aftermassiverole")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        const g = new Discord.ButtonBuilder()
        .setCustomId("maassivroleHelp")
        .setEmoji("<:better_rouage:1147593990921797682>")
        .setStyle(Discord.ButtonStyle.Danger)
        .setLabel("Système automatique")
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3massiverole')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        const row5 = new Discord.ActionRowBuilder().addComponents(g)
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [massiveroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3, row5] })
        else await msg.edit ({ embeds: [massiveroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3, row5] })
        })
    
  }
  async function updateupdateguild(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM updateguild WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        stateupdateguild = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultupdateguild")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2updateguild')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expulupdateguild')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('banniupdateguild')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroleupdateguild')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucunupdateguild')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("updateguildperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("updateguildactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("updateguildlogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("updateguildlogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantupdateguild")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterupdateguild")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3updateguild')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [updateguildEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        else await msg.edit ({ embeds: [updateguildEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        })
    
  }  

  async function updatemuteuser(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM muteuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statemuteuser = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultmuteuser")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2muteuser')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulmuteuser')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('bannimuteuser')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprrolemuteuser')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunmuteuser')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("muteuserperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("muteuseractivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("muteuserlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("muteuserlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantmuteuser")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("aftermuteuser")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("intervallemuteuser")
    .setEmoji("<:horloge:1229875716284223580>")
    .setLabel("Intervalle")
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("maxmuteuser")
    .setEmoji("<:__:1229876600590438452>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setLabel("Maximum")
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3muteuser')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    
    if(interaction) await interaction.update({ embeds: [antimuteuser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antimuteuser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    })
}

async function updatesourdineuser(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM sourdineuser WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

    const state = req[0].state
    statesourdineuser = req[0].state
    const logs = req[0].logs
    const permission = req[0].permission
    const punition = req[0].punition
    const reste = req[0].reste

    if(logs == "on") ok = "✅"
    else if(logs == "off") ok = "❌"
    else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

    const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultsourdineuser")

    const select2 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select2sourdineuser')
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Expulsion.")
        .setValue('expulsourdineuser')
        .setDefault(puni[req[0].punition] == "Expulsion."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Bannissement.")
        .setValue('bannisourdineuser')
        .setDefault(puni[req[0].punition] == "Bannissement."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Suppression de ces rôles.")
        .setValue('supprrolesourdineuser')
        .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel("Aucune.")
        .setValue('aucunsourdineuser')
        .setDefault(puni[req[0].punition] == "Aucune."),
    );

    const a = new Discord.ButtonBuilder()
    .setLabel("Permission")
    .setCustomId("sourdineuserperms")
    .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const b = new Discord.ButtonBuilder()
    .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
    .setCustomId("sourdineuseractivate")
    .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const c = new Discord.ButtonBuilder()
    .setLabel("Logs")
    .setCustomId("sourdineuserlogs")
    .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
    .setStyle(Discord.ButtonStyle.Secondary)
    const d = new Discord.ButtonBuilder()
    .setLabel("Salon")
    .setCustomId("sourdineuserlogsChannelLogs")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const e = new Discord.ButtonBuilder()
    .setLabel("Indépendant")
    .setCustomId("utilisateurIndependantsourdineuser")
    .setEmoji("<:paper:1228316546313748542>")
    .setStyle(Discord.ButtonStyle.Primary)
    const f = new Discord.ButtonBuilder()
    .setCustomId("aftersourdineuser")
    .setEmoji("<:better_after:1148608588454051840>")
    .setStyle(Discord.ButtonStyle.Success)
    const g = new Discord.ButtonBuilder()
    .setCustomId("intervallesourdineuser")
    .setEmoji("<:horloge:1229875716284223580>")
    .setLabel("Intervalle")
    .setStyle(Discord.ButtonStyle.Secondary)
    const h = new Discord.ButtonBuilder()
    .setCustomId("maxsourdineuser")
    .setEmoji("<:__:1229876600590438452>")
    .setStyle(Discord.ButtonStyle.Secondary)
    .setLabel("Maximum")
    let inde = null

    const select3 = new Discord.StringSelectMenuBuilder()
    .setCustomId('select3sourdineuser')
    .setPlaceholder("Choisis les utilisateurs autorisés")
    .setMaxValues(3)
    .addOptions(
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste des propriétaires.`)
    .setValue('propriouser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur dans la liste blanche.`)
    .setValue('blancheuser')
    .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
    new Discord.StringSelectMenuOptionBuilder()
    .setLabel(`Utilisateur indépendant.`)
    .setValue('independantuser')
    .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"));


    const row = new Discord.ActionRowBuilder().addComponents(select);
    const row2 = new Discord.ActionRowBuilder().addComponents(select2);
    const row3 = new Discord.ActionRowBuilder()
    const row4 = new Discord.ActionRowBuilder().addComponents(select3);
    row3.addComponents(b, a)
    if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
    row3.addComponents(c)
    if(inde == null && ok == "❌") row3.addComponents(g)
    if(ok !== "❌" && inde == null) row3.addComponents(d)
    row3.addComponents(f)
    
    if(interaction) await interaction.update({ embeds: [antisourdineuser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    else await msg.edit({ embeds: [antisourdineuser(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste], req[0].intervalle, req[0].maximum)], components: [row, row2, row4, row3] })
    })
}

async function updatesupprembed(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM supprembed WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        statesupprembed = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultsupprembed")

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("supprembedperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        .setDisabled(true)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("supprembedactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("supprembedlogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("supprembedlogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("aftersupprembed")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        const g = new Discord.ButtonBuilder()
        .setCustomId("maassivroleHelp")
        .setEmoji("<:better_rouage:1147593990921797682>")
        .setStyle(Discord.ButtonStyle.Danger)
        .setLabel("Système automatique")
        let inde = null

        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row3 = new Discord.ActionRowBuilder()
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)
        const row5 = new Discord.ActionRowBuilder().addComponents(g)

        if(interaction) await interaction.update({ embeds: [supprembed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒")], components: [row, row3, row5] })
        else await msg.edit ({ embeds: [supprembed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒")], components: [row, row3, row5] })
        })
    
  }

  async function updatedeleterole(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM deleterole WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        statedeleterole = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdeleterole")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2deleterole')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expuldeleterole')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('bannideleterole')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroledeleterole')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucundeleterole')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("deleteroleperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("deleteroleactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("deleterolelogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("deleterolelogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantdeleterole")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterdeleterole")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3deleterole')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [deleteroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        else await msg.edit ({ embeds: [deleteroleEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        })
    
  }
  async function updatedeletechannel(bot, message, interaction, msg) {
    await bot.db.query(`SELECT * FROM deletechannel WHERE guildId = "${message.guild.id}"`, async (err, req) => { 
        let ok;

        const state = req[0].state
        statedeletechannel = req[0].state
        const logs = req[0].logs
        const permission = req[0].permission
        const punition = req[0].punition
        const reste = req[0].reste

        if(logs == "on") ok = "✅"
        else if(logs == "off") ok = "❌"
        else ok = message.guild.channels.cache.get(logs) ? `${message.guild.channels.cache.get(logs).name} (ID: ${logs})` : "✅"

        const select = selectMENUS(stateaddbot, stateroleadd, stateban, statethreadcreate, statecreaterole, statecreatechannel, statecreatewebhook,  statedecouser, statedepluser, stateremoverole, statetimeout, stateexpuluser,  stateantilink, stateantispam, statetoxicite, stateupdaterole, stateupdatechannel, stateupdateguild, statemassiverole, statemuteuser, statesourdineuser, statesupprembed, statedeleterole, statedeletechannel, "defaultdeletechannel")
        const select2 = new Discord.StringSelectMenuBuilder()
            .setCustomId('select2deletechannel')
            .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion.")
            .setValue('expuldeletechannel')
            .setDefault(puni[req[0].punition] == "Expulsion."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannissement.")
            .setValue('bannideletechannel')
            .setDefault(puni[req[0].punition] == "Bannissement."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de ces rôles.")
            .setValue('supprroledeletechannel')
            .setDefault(puni[req[0].punition] == "Suppression de ces rôles."),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Aucune.")
            .setValue('aucundeletechannel')
            .setDefault(puni[req[0].punition] == "Aucune."),
        );

        const a = new Discord.ButtonBuilder()
        .setLabel("Permission")
        .setCustomId("deletechannelperms")
        .setEmoji(req[0].permission == "on" ? "<:permsopen:1228311976858353746>" : "<:permsclose:1228311975516307456>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const b = new Discord.ButtonBuilder()
        .setLabel(req[0].state == "on" ? "Désactiver" : "Activer")
        .setCustomId("deletechannelactivate")
        .setEmoji(req[0].state == "on" ? "<:better_off:1147103040223068250>" : "<:better_on:1147103042492182590>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const c = new Discord.ButtonBuilder()
        .setLabel("Logs")
        .setCustomId("deletechannellogs")
        .setEmoji(ok == "❌" ? "<:paper:1228316546313748542>" : "<:nopaper:1228316544283578398>")
        .setStyle(Discord.ButtonStyle.Secondary)
        const d = new Discord.ButtonBuilder()
        .setLabel("Salon")
        .setCustomId("deletechannellogsChannelLogs")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const e = new Discord.ButtonBuilder()
        .setLabel("Indépendant")
        .setCustomId("utilisateurIndependantdeletechannel")
        .setEmoji("<:paper:1228316546313748542>")
        .setStyle(Discord.ButtonStyle.Primary)
        const f = new Discord.ButtonBuilder()
        .setCustomId("afterdeletechannel")
        .setEmoji("<:better_after:1148608588454051840>")
        .setStyle(Discord.ButtonStyle.Success)
        let inde = null

        const select3 = new Discord.StringSelectMenuBuilder()
        .setCustomId('select3deletechannel')
        .setPlaceholder("Choisis les utilisateurs autorisés")
        .setMaxValues(3)
        .addOptions(
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste des propriétaires.`)
        .setValue('propriouser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "proprio" || req[0].reste == "proprioindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur dans la liste blanche.`)
        .setValue('blancheuser')
        .setDefault(req[0].reste == "proprioblanche" || req[0].reste == "blanche"|| req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant"),
        new Discord.StringSelectMenuOptionBuilder()
        .setLabel(`Utilisateur indépendant.`)
        .setValue('independantuser')
        .setDefault(req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "independant" || req[0].reste == "proprioblancheindependant"),
    );


        const row = new Discord.ActionRowBuilder().addComponents(select);
        const row2 = new Discord.ActionRowBuilder().addComponents(select2);
        const row3 = new Discord.ActionRowBuilder()
        const row4 = new Discord.ActionRowBuilder().addComponents(select3);
        row3.addComponents(b, a)
        if(req[0].reste == "independant" || req[0].reste == "proprioindependant" || req[0].reste == "blancheindependant" || req[0].reste == "proprioblancheindependant") inde = e, row3.addComponents(e)
        row3.addComponents(c)
        if(ok !== "❌" && inde == null) row3.addComponents(d)
        if(ok !== "❌" && inde !== null) row3.addComponents(f)

        if(interaction) await interaction.update({ embeds: [deletechannelEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        else await msg.edit ({ embeds: [deletechannelEmbed(req[0].state == "on" ? "✅" : "❌", ok, req[0].permission == "on" ? "🔓" : "🔒", puni[req[0].punition], rest[req[0].reste])], components: [row, row2, row4, row3] })
        })
    
  }
  }}

  

function antibotEmbed(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Ajout de bot", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antiroleaddEmbed(state, logs, permission, punitions, reste, nbRoleAddrole, nbPermAddrole) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Ajout de rôle", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nInclus:\n   ・ ${nbRoleAddrole} rôle.\n   ・ ${nbPermAddrole} permissions.\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function updateantiban(state, logs, permission, punitions, reste, intervalle, max) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Bannisement d'utilisateur", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMax: ${max}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antithreadcreateEmbed(state, logs, permission, punitions, reste, ignorer, duree) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Création de fil", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIgnorer: ${ignorer} salon.\nPermission: ${permission}\nPunition: ${punitions}${duree ? `\nDurée: ${duree}` : ""}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function anticreaterole(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Création de rôle", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function anticreatechannel(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Création de salon", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function anticreatewebhook(state, logs, permission, punitions, reste, action) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Création de webhook", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nAction: ${action}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antidecouser(state, logs, permission, punitions, reste, intervalle, max) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Déconnexion d'utilisateur", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMax: ${max}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antidepluser(state, logs, permission, punitions, reste, intervalle, max) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Déplacement d'un utilisateur", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMax: ${max}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function removeroleEmbed(state, logs, permission, punitions, reste, nbRoleAddrole, nbPermAddrole) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Enlever un rôle", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nInclus:\n   ・ ${nbRoleAddrole} rôle.\n   ・ ${nbPermAddrole} permissions.\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antitimeout(state, logs, permission, punitions, reste, intervalle, max) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Exclure temporairement", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMax: ${max}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antiexpuluser(state, logs, permission, punitions, reste, intervalle, max) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Expulsion d’utilisateur", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMax: ${max}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antilinkEmbed(state, logs, permission, punitions, reste, ignorer, duree, inclus) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Message contenant des liens", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nInclus:\n${link[inclus]}\nIgnorer: ${ignorer} salon.\nPermission: ${permission}\nPunition: ${punitions}${duree ? `\nDurée: ${duree}` : ""}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function antispamEmbed(state, logs, permission, punitions, reste, ignorer, duree, inclus, intervalle, msgTime) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Message contenant du spam", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMessage: ${msgTime}\nIgnorer: ${ignorer} salon.\nPermission: ${permission}\nPunition: ${punitions}${duree ? `\nDurée: ${duree}` : ""}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function toxiciteEmbed(state, logs, permission, punitions, reste, ignorer, duree, pourcentage) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Message contenant un taux de toxicité", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIgnorer: ${ignorer} salon.\nPourcentage: ${pourcentage}\nPermission: ${permission}\nPunition: ${punitions}${duree ? `\nDurée: ${duree}` : ""}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function updateroleEmbed(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Mise à jour de rôle", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function updatechannelEmbed(state, logs, permission, punitions, reste, ignorer) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Mise à jour de salon", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIgnorer: ${ignorer} salon.\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function updateguildEmbed(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Mise à jour de serveur", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}
function massiveroleEmbed(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Mise à jour massive de la position des rôles", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}
function antimuteuser(state, logs, permission, punitions, reste, intervalle, max) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Mise en muet d'un utilisateur", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMax: ${max}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}
function antisourdineuser(state, logs, permission, punitions, reste, intervalle, max) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Mise en sourdine d'un utilisateur", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nIntervalle: ${intervalle}\nMax: ${max}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function supprembed(state, logs, permission) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Suppression de message contenant une embed", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\n\nPermission: 🔓\nPunition: Aucune.\nAutorisé: ❌\`\`\``})
    return embed
}

function deleteroleEmbed(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Suppression de rôle", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}
function deletechannelEmbed(state, logs, permission, punitions, reste) {
    const embed = new Discord.EmbedBuilder()
    .setColor("#2c2f33")    
    .addFields({ name: "・Suppression de salon", value: `\`\`\`py\nÉtat: ${state}\nLogs: ${logs}\nPermission: ${permission}\nPunition: ${punitions}\nAutorisé:\n${reste}\`\`\``})
    return embed
}

function selectMENUS(antibot, roleadd, ban, treadCreate, createrole, createchannel, createwebhook, decouser, depluser, removerole, expuluser, timeout, antilink, antispam, toxicite, updaterole, updatechannel, updateguild, massiverole, muteuser, sourdineuser, supprembed, deleterole, deletechannel, option) {
    const select = new Discord.StringSelectMenuBuilder()
        .setCustomId('select')
        .addOptions(
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Ajout de bot")
            .setValue('addbot')
            .setEmoji(antibot == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultAntiBot" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Ajout de rôle")
            .setValue('roleadd')
            .setEmoji(roleadd == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultRoleAdd" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Bannisement d’utilisateur")
            .setValue('ban')
            .setEmoji(ban == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultBan" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Création de fil")
            .setValue('threadcreate')
            .setEmoji(treadCreate == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultthreadcreate" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Création de rôle")
            .setValue('createrole')
            .setEmoji(createrole == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultcreaterole" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Création de salon")
            .setValue('createchannel')
            .setEmoji(createchannel == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultcreatechannel" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Création de webhook")
            .setValue('createwebhook')
            .setEmoji(createwebhook == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultcreatewebhook" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Déconnexion utilisateur")
            .setValue('decouser')
            .setEmoji(decouser == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultdecouser" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Déplacement utilisateur")
            .setValue('depluser')
            .setEmoji(depluser == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultdepluser" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Enlever un rôle")
            .setValue('removerole')
            .setEmoji(removerole == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultremoverole" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Exclure temporairement")
            .setValue('timeout')
            .setEmoji(timeout == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaulttimeout" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Expulsion d’utilisateur")
            .setValue('expuluser')
            .setEmoji(expuluser == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultexpuluser" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Message contenant des liens")
            .setValue('antilink')
            .setEmoji(antilink == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultantilink" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Message contenant du spam")
            .setValue('antispam')
            .setEmoji(antispam == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultantispam" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Message contenant un taux de toxicité")
            .setValue('toxicite')
            .setEmoji(toxicite == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaulttoxicite" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Mise à jour de rôle")
            .setValue('updaterole')
            .setEmoji(updaterole == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultupdaterole" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Mise à jour de salon")
            .setValue('updatechannel')
            .setEmoji(updatechannel == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultupdatechannel" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Mise à jour de serveur")
            .setValue('updateguild')
            .setEmoji(updateguild == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultupdateguild" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Mise à jour massive de la position des rôles")
            .setValue('massiverole')
            .setEmoji(massiverole == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultmassiverole" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Mise en muet d'un utilisateur")
            .setValue('muteuser')
            .setEmoji(muteuser == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultmuteuser" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Mise en sourdine d'un utilisateur")
            .setValue('sourdineuser')
            .setEmoji(sourdineuser == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultsourdineuser" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de message contenant une embed")
            .setValue('supprembed')
            .setEmoji(supprembed == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultsupprembed" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de rôle")
            .setValue('deleterole')
            .setEmoji(deleterole == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultdeleterole" ? true : false),
            new Discord.StringSelectMenuOptionBuilder()
            .setLabel("Suppression de salon")
            .setValue('deletechannel')
            .setEmoji(deletechannel == "on" ? "<:better_on:1147103042492182590>" : "<:better_off:1147103040223068250>")
            .setDefault(option == "defaultdeletechannel" ? true : false),
        );
    return select
}

function wait(ms) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms);
    });
  }

  function testDuree(duration) {
    const regex = /^(\d+)(ms|s|m|h|d)?$/;

    const match = duration.match(regex);

    if (!match) {
        return null; 
    }

    const value = parseInt(match[1], 10);
    const unit = match[2] || 'ms';

    switch (unit) {
        case 'ms':
            return `${value}ms`;
        case 's':
            return `${value}s`;
        case 'm':
            return `${value}m`;
        case 'h':
            return `${value}h`;
        case 'd':
            return `${value}d`;
        default:
            return null; 
    }
}

